
Zumo_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005808  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080059c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000010  080059d8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080059d8  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d303  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001caa  00000000  00000000  00014343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00015ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  00016c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015814  00000000  00000000  0001768f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfed  00000000  00000000  0002cea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9c4  00000000  00000000  0003ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  000c5898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c8e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005988 	.word	0x08005988

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005988 	.word	0x08005988

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <forward>:
struct Song{
	int bpm; // should be between 50 and 150
	int duration; //in seconds
	int genre;
};
void forward(int ccr){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000512:	4809      	ldr	r0, [pc, #36]	@ (8000538 <forward+0x34>)
 8000514:	f002 f9d4 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051e:	4806      	ldr	r0, [pc, #24]	@ (8000538 <forward+0x34>)
 8000520:	f002 f9ce 	bl	80028c0 <HAL_GPIO_WritePin>
	TIM4->CCR1 = ccr;
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <forward+0x38>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = ccr;
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <forward+0x3c>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020000 	.word	0x40020000
 800053c:	40000800 	.word	0x40000800
 8000540:	40000400 	.word	0x40000400

08000544 <right>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
	TIM4->CCR1 = ccr;
	TIM3->CCR2 = ccr;
}
void right(int ccr){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000552:	4809      	ldr	r0, [pc, #36]	@ (8000578 <right+0x34>)
 8000554:	f002 f9b4 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <right+0x34>)
 8000560:	f002 f9ae 	bl	80028c0 <HAL_GPIO_WritePin>
	TIM4->CCR1 = ccr;
 8000564:	4a05      	ldr	r2, [pc, #20]	@ (800057c <right+0x38>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = 0;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <right+0x3c>)
 800056c:	2200      	movs	r2, #0
 800056e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40020000 	.word	0x40020000
 800057c:	40000800 	.word	0x40000800
 8000580:	40000400 	.word	0x40000400

08000584 <left>:
void left(int ccr){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000592:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <left+0x34>)
 8000594:	f002 f994 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <left+0x34>)
 80005a0:	f002 f98e 	bl	80028c0 <HAL_GPIO_WritePin>
	TIM4->CCR1 = 0;
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <left+0x38>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = ccr;
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <left+0x3c>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40000800 	.word	0x40000800
 80005c0:	40000400 	.word	0x40000400

080005c4 <right_sensor>:
int right_sensor(GPIO_InitTypeDef GPIO_InitStruct){
 80005c4:	b084      	sub	sp, #16
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	f107 0c08 	add.w	ip, r7, #8
 80005ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0108 	add.w	r1, r7, #8
 80005e2:	4814      	ldr	r0, [pc, #80]	@ (8000634 <right_sensor+0x70>)
 80005e4:	f001 ffe8 	bl	80025b8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	4811      	ldr	r0, [pc, #68]	@ (8000634 <right_sensor+0x70>)
 80005ee:	f002 f967 	bl	80028c0 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 80005f2:	2005      	movs	r0, #5
 80005f4:	f001 fe18 	bl	8002228 <HAL_Delay>
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
	  TIM5->CNT = 0;
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <right_sensor+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <right_sensor+0x70>)
 8000618:	f001 ffce 	bl	80025b8 <HAL_GPIO_Init>
	  HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f001 fe03 	bl	8002228 <HAL_Delay>
	  return count;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <right_sensor+0x78>)
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800062e:	b004      	add	sp, #16
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40020000 	.word	0x40020000
 8000638:	40000c00 	.word	0x40000c00
 800063c:	2000002c 	.word	0x2000002c

08000640 <left_sensor>:
int left_sensor(GPIO_InitTypeDef GPIO_InitStruct){
 8000640:	b084      	sub	sp, #16
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
 8000646:	f107 0c08 	add.w	ip, r7, #8
 800064a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000652:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <left_sensor+0x78>)
 8000662:	f001 ffa9 	bl	80025b8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <left_sensor+0x78>)
 800066e:	f002 f927 	bl	80028c0 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000672:	2005      	movs	r0, #5
 8000674:	f001 fdd8 	bl	8002228 <HAL_Delay>
	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800067c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
	  TIM2->CNT = 0;
 800068e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0108 	add.w	r1, r7, #8
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <left_sensor+0x78>)
 800069c:	f001 ff8c 	bl	80025b8 <HAL_GPIO_Init>
	  HAL_Delay(10);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 fdc1 	bl	8002228 <HAL_Delay>
	  return count;
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <left_sensor+0x7c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b2:	b004      	add	sp, #16
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40020400 	.word	0x40020400
 80006bc:	2000002c 	.word	0x2000002c

080006c0 <stop>:
void stop(){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	TIM4->CCR1 = 0;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <stop+0x20>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <stop+0x24>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <stop+0x28>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40000800 	.word	0x40000800
 80006e4:	40000400 	.word	0x40000400
 80006e8:	40010000 	.word	0x40010000

080006ec <dance>:
void dance(int ccr){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	TIM1->CCR3 = ccr;
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <dance+0x1c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40010000 	.word	0x40010000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0b8      	sub	sp, #224	@ 0xe0
 8000710:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f001 fd17 	bl	8002144 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 fe97 	bl	8001448 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f001 f993 	bl	8001a44 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800071e:	f001 f967 	bl	80019f0 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000722:	f001 f863 	bl	80017ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000726:	f001 f809 	bl	800173c <MX_TIM3_Init>
  MX_TIM2_Init();
 800072a:	f000 ff97 	bl	800165c <MX_TIM2_Init>
  MX_TIM9_Init();
 800072e:	f001 f925 	bl	800197c <MX_TIM9_Init>
  MX_TIM5_Init();
 8000732:	f001 f8b3 	bl	800189c <MX_TIM5_Init>
  MX_TIM1_Init();
 8000736:	f000 fef1 	bl	800151c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800073a:	2100      	movs	r1, #0
 800073c:	48b2      	ldr	r0, [pc, #712]	@ (8000a08 <main+0x2fc>)
 800073e:	f002 fe6b 	bl	8003418 <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000742:	2104      	movs	r1, #4
 8000744:	48b1      	ldr	r0, [pc, #708]	@ (8000a0c <main+0x300>)
 8000746:	f002 fe67 	bl	8003418 <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800074a:	2108      	movs	r1, #8
 800074c:	48b0      	ldr	r0, [pc, #704]	@ (8000a10 <main+0x304>)
 800074e:	f002 fe63 	bl	8003418 <HAL_TIM_PWM_Start>

 int ccr = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 int seconds = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	48ab      	ldr	r0, [pc, #684]	@ (8000a14 <main+0x308>)
 8000766:	f002 f8ab 	bl	80028c0 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	48a8      	ldr	r0, [pc, #672]	@ (8000a14 <main+0x308>)
 8000772:	f002 f8a5 	bl	80028c0 <HAL_GPIO_WritePin>
 struct Song songs[13];
 songs[0].bpm = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 songs[0].duration = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
 songs[0].genre = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
 //song 1: one kiss
 songs[1].bpm = 124;
 8000782:	237c      	movs	r3, #124	@ 0x7c
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
 songs[1].duration = 215;
 8000786:	23d7      	movs	r3, #215	@ 0xd7
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
 songs[1].genre = 3;
 800078a:	2303      	movs	r3, #3
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 //somg2: both of us
 songs[2].bpm = 124;
 800078e:	237c      	movs	r3, #124	@ 0x7c
 8000790:	633b      	str	r3, [r7, #48]	@ 0x30
 songs[2].duration = 352;
 8000792:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
 songs[2].genre = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
 //song 3: romantika
 songs[3].bpm = 160;
 800079c:	23a0      	movs	r3, #160	@ 0xa0
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 songs[3].duration = 250;
 80007a0:	23fa      	movs	r3, #250	@ 0xfa
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
 songs[3].genre = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
 //song 4: birds of a feather
 songs[4].bpm = 104;
 80007a8:	2368      	movs	r3, #104	@ 0x68
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 songs[4].duration = 230;
 80007ac:	23e6      	movs	r3, #230	@ 0xe6
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 songs[4].genre = 3;
 80007b0:	2303      	movs	r3, #3
 80007b2:	653b      	str	r3, [r7, #80]	@ 0x50
 //song 5: new light
 songs[5].bpm = 124;
 80007b4:	237c      	movs	r3, #124	@ 0x7c
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
 songs[5].duration = 217;
 80007b8:	23d9      	movs	r3, #217	@ 0xd9
 80007ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 songs[5].genre = 3;
 80007bc:	2303      	movs	r3, #3
 80007be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 //song 6: california love
 songs[6].bpm = 92;
 80007c0:	235c      	movs	r3, #92	@ 0x5c
 80007c2:	663b      	str	r3, [r7, #96]	@ 0x60
 songs[6].duration = 285;
 80007c4:	f240 131d 	movw	r3, #285	@ 0x11d
 80007c8:	667b      	str	r3, [r7, #100]	@ 0x64
 songs[6].genre = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 //song 7: I had some help
 songs[7].bpm = 128;
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 songs[7].duration = 201;
 80007d2:	23c9      	movs	r3, #201	@ 0xc9
 80007d4:	673b      	str	r3, [r7, #112]	@ 0x70
 songs[7].genre = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	677b      	str	r3, [r7, #116]	@ 0x74
 //song 8: percocet and stripper joint
 songs[8].bpm = 80;
 80007da:	2350      	movs	r3, #80	@ 0x50
 80007dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 songs[8].duration = 148;
 80007de:	2394      	movs	r3, #148	@ 0x94
 80007e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 songs[8].genre = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 //song 9: nun major
 songs[9].bpm = 98;
 80007e8:	2362      	movs	r3, #98	@ 0x62
 80007ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 songs[9].duration = 152;
 80007ee:	2398      	movs	r3, #152	@ 0x98
 80007f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 songs[9].genre = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 //song 10: bullets
 songs[10].bpm = 125;
 80007fa:	237d      	movs	r3, #125	@ 0x7d
 80007fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 songs[10].duration = 299;
 8000800:	f240 132b 	movw	r3, #299	@ 0x12b
 8000804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 songs[10].genre = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 //song 11: jolene
 songs[11].bpm = 111;
 800080e:	236f      	movs	r3, #111	@ 0x6f
 8000810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 songs[11].duration = 161;
 8000814:	23a1      	movs	r3, #161	@ 0xa1
 8000816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 songs[11].genre = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 //song 12: all your'n
 songs[12].bpm = 78;
 8000820:	234e      	movs	r3, #78	@ 0x4e
 8000822:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 songs[12].duration = 218;
 8000826:	23da      	movs	r3, #218	@ 0xda
 8000828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 songs[12].genre = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0


 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	2102      	movs	r1, #2
 8000836:	4878      	ldr	r0, [pc, #480]	@ (8000a18 <main+0x30c>)
 8000838:	f002 f842 	bl	80028c0 <HAL_GPIO_WritePin>
 HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800083c:	2104      	movs	r1, #4
 800083e:	4877      	ldr	r0, [pc, #476]	@ (8000a1c <main+0x310>)
 8000840:	f002 fef4 	bl	800362c <HAL_TIM_IC_Start_IT>
 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000844:	2108      	movs	r1, #8
 8000846:	4876      	ldr	r0, [pc, #472]	@ (8000a20 <main+0x314>)
 8000848:	f002 fef0 	bl	800362c <HAL_TIM_IC_Start_IT>
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
 TIM2->CCER |= (0b1 << 9);
 800085a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000864:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000868:	6213      	str	r3, [r2, #32]
 TIM2->CCER &= ~(0b1 << 11);
 800086a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000878:	6213      	str	r3, [r2, #32]
 TIM5->CCER |= (0b1 << 5);
 800087a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a24 <main+0x318>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a69      	ldr	r2, [pc, #420]	@ (8000a24 <main+0x318>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6213      	str	r3, [r2, #32]
 TIM5->CCER &= ~(0b1 << 7);
 8000886:	4b67      	ldr	r3, [pc, #412]	@ (8000a24 <main+0x318>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4a66      	ldr	r2, [pc, #408]	@ (8000a24 <main+0x318>)
 800088c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000890:	6213      	str	r3, [r2, #32]
 int rightS = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 int leftS = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 int genre = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 int find_shape = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 int intersection = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

 HAL_UART_Receive_IT(&huart6, &receive, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	495d      	ldr	r1, [pc, #372]	@ (8000a28 <main+0x31c>)
 80008b4:	485d      	ldr	r0, [pc, #372]	@ (8000a2c <main+0x320>)
 80008b6:	f004 f8c0 	bl	8004a3a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 {
	  //state: init
	 receive = 0;
 80008ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000a28 <main+0x31c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	 transmit = 97;
 80008c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000a30 <main+0x324>)
 80008c2:	2261      	movs	r2, #97	@ 0x61
 80008c4:	701a      	strb	r2, [r3, #0]
	 init = 1;
 80008c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a34 <main+0x328>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
	  while(init == 1){
 80008cc:	bf00      	nop
 80008ce:	4b59      	ldr	r3, [pc, #356]	@ (8000a34 <main+0x328>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d0fb      	beq.n	80008ce <main+0x1c2>

	  }

	  //setup
	  ccr = 15;
 80008d6:	230f      	movs	r3, #15
 80008d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	  int length = songs[songNum].duration;
 80008dc:	4b56      	ldr	r3, [pc, #344]	@ (8000a38 <main+0x32c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	33d8      	adds	r3, #216	@ 0xd8
 80008ec:	443b      	add	r3, r7
 80008ee:	3bbc      	subs	r3, #188	@ 0xbc
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 	  TIM1->ARR = 5000 * 60 / songs[songNum].bpm;
 80008f6:	4b50      	ldr	r3, [pc, #320]	@ (8000a38 <main+0x32c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	33d8      	adds	r3, #216	@ 0xd8
 8000906:	443b      	add	r3, r7
 8000908:	3bc0      	subs	r3, #192	@ 0xc0
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a3c <main+0x330>)
 800090e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000912:	4b4b      	ldr	r3, [pc, #300]	@ (8000a40 <main+0x334>)
 8000914:	62da      	str	r2, [r3, #44]	@ 0x2c
	  dance(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800091a:	f7ff fee7 	bl	80006ec <dance>
	  genre = songs[songNum].genre;
 800091e:	4b46      	ldr	r3, [pc, #280]	@ (8000a38 <main+0x32c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	33d8      	adds	r3, #216	@ 0xd8
 800092e:	443b      	add	r3, r7
 8000930:	3bb8      	subs	r3, #184	@ 0xb8
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	  __HAL_TIM_SET_COUNTER(&htim9, 0);
 8000938:	4b42      	ldr	r3, [pc, #264]	@ (8000a44 <main+0x338>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_Base_Start(&htim9);
 8000940:	4840      	ldr	r0, [pc, #256]	@ (8000a44 <main+0x338>)
 8000942:	f002 fcbf 	bl	80032c4 <HAL_TIM_Base_Start>
	  int tim9_time = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

	  //state: find_shape part 1
	  find_shape = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  intersection = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  while(find_shape == 1){
 8000958:	e11c      	b.n	8000b94 <main+0x488>
		  forward(ccr);
 800095a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800095e:	f7ff fdd1 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	f7ff fe2b 	bl	80005c4 <right_sensor>
 800096e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097a:	f7ff fe61 	bl	8000640 <left_sensor>
 800097e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  //test a
		  transmit = 97;
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <main+0x324>)
 8000984:	2261      	movs	r2, #97	@ 0x61
 8000986:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	2201      	movs	r2, #1
 800098e:	4928      	ldr	r1, [pc, #160]	@ (8000a30 <main+0x324>)
 8000990:	4826      	ldr	r0, [pc, #152]	@ (8000a2c <main+0x320>)
 8000992:	f003 ffc7 	bl	8004924 <HAL_UART_Transmit>
		  //test a
		  if(rightS > 530 && leftS > 830) {
 8000996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800099a:	f240 2212 	movw	r2, #530	@ 0x212
 800099e:	4293      	cmp	r3, r2
 80009a0:	f340 8082 	ble.w	8000aa8 <main+0x39c>
 80009a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009a8:	f240 323e 	movw	r2, #830	@ 0x33e
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dd7b      	ble.n	8000aa8 <main+0x39c>
			  if((genre == 1 || genre == 2) && intersection == 0){
 80009b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d003      	beq.n	80009c0 <main+0x2b4>
 80009b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d107      	bne.n	80009d0 <main+0x2c4>
 80009c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <main+0x2c4>
				  find_shape = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				  break;
 80009ce:	e0e6      	b.n	8000b9e <main+0x492>
			  }
			  else if(intersection == 1){
 80009d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10d      	bne.n	80009f4 <main+0x2e8>
				  //test c
				  transmit = 99;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <main+0x324>)
 80009da:	2263      	movs	r2, #99	@ 0x63
 80009dc:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2201      	movs	r2, #1
 80009e4:	4912      	ldr	r1, [pc, #72]	@ (8000a30 <main+0x324>)
 80009e6:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <main+0x320>)
 80009e8:	f003 ff9c 	bl	8004924 <HAL_UART_Transmit>
				  //test c
				  find_shape = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				  break;
 80009f2:	e0d4      	b.n	8000b9e <main+0x492>
			  }
			  if(genre == 3 || genre == 4){
 80009f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d043      	beq.n	8000a84 <main+0x378>
 80009fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d14b      	bne.n	8000a9c <main+0x390>
				  while(rightS > 530 && leftS > 830){
 8000a04:	e03e      	b.n	8000a84 <main+0x378>
 8000a06:	bf00      	nop
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	200000c8 	.word	0x200000c8
 8000a10:	20000038 	.word	0x20000038
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	20000158 	.word	0x20000158
 8000a20:	20000080 	.word	0x20000080
 8000a24:	40000c00 	.word	0x40000c00
 8000a28:	20000034 	.word	0x20000034
 8000a2c:	200001e8 	.word	0x200001e8
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000035 	.word	0x20000035
 8000a38:	20000036 	.word	0x20000036
 8000a3c:	000493e0 	.word	0x000493e0
 8000a40:	40010000 	.word	0x40010000
 8000a44:	200001a0 	.word	0x200001a0
					  forward(ccr);
 8000a48:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8000a4c:	f7ff fd5a 	bl	8000504 <forward>
					  rightS = right_sensor(GPIO_InitStruct);
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a58:	f7ff fdb4 	bl	80005c4 <right_sensor>
 8000a5c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
					  leftS = left_sensor(GPIO_InitStruct);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a68:	f7ff fdea 	bl	8000640 <left_sensor>
 8000a6c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
					  //test b
					  transmit = 98;
 8000a70:	4bb3      	ldr	r3, [pc, #716]	@ (8000d40 <main+0x634>)
 8000a72:	2262      	movs	r2, #98	@ 0x62
 8000a74:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	49b0      	ldr	r1, [pc, #704]	@ (8000d40 <main+0x634>)
 8000a7e:	48b1      	ldr	r0, [pc, #708]	@ (8000d44 <main+0x638>)
 8000a80:	f003 ff50 	bl	8004924 <HAL_UART_Transmit>
				  while(rightS > 530 && leftS > 830){
 8000a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000a88:	f240 2212 	movw	r2, #530	@ 0x212
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	dd05      	ble.n	8000a9c <main+0x390>
 8000a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a94:	f240 323e 	movw	r2, #830	@ 0x33e
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	dcd5      	bgt.n	8000a48 <main+0x33c>
					  //test b
				  }
			  }
			  intersection++;
 8000a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000aa6:	e075      	b.n	8000b94 <main+0x488>
		  }
		  else if(!(rightS > 530 && leftS > 830)){
 8000aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000aac:	f240 2212 	movw	r2, #530	@ 0x212
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	dd32      	ble.n	8000b1a <main+0x40e>
 8000ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ab8:	f240 323e 	movw	r2, #830	@ 0x33e
 8000abc:	4293      	cmp	r3, r2
 8000abe:	dc69      	bgt.n	8000b94 <main+0x488>
			  while(rightS > 530){
 8000ac0:	e02b      	b.n	8000b1a <main+0x40e>
				  leftS = left_sensor(GPIO_InitStruct);
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aca:	f7ff fdb9 	bl	8000640 <left_sensor>
 8000ace:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ada:	f7ff fd73 	bl	80005c4 <right_sensor>
 8000ade:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 8000ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ae6:	f240 2212 	movw	r2, #530	@ 0x212
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dd05      	ble.n	8000afa <main+0x3ee>
 8000aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000af2:	f240 323e 	movw	r2, #830	@ 0x33e
 8000af6:	4293      	cmp	r3, r2
 8000af8:	dc16      	bgt.n	8000b28 <main+0x41c>
					  break;
				  }
				  right(ccr + 25);
 8000afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000afe:	3319      	adds	r3, #25
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fd1f 	bl	8000544 <right>
				  //test d
				  transmit = 100;
 8000b06:	4b8e      	ldr	r3, [pc, #568]	@ (8000d40 <main+0x634>)
 8000b08:	2264      	movs	r2, #100	@ 0x64
 8000b0a:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	2201      	movs	r2, #1
 8000b12:	498b      	ldr	r1, [pc, #556]	@ (8000d40 <main+0x634>)
 8000b14:	488b      	ldr	r0, [pc, #556]	@ (8000d44 <main+0x638>)
 8000b16:	f003 ff05 	bl	8004924 <HAL_UART_Transmit>
			  while(rightS > 530){
 8000b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000b1e:	f240 2212 	movw	r2, #530	@ 0x212
 8000b22:	4293      	cmp	r3, r2
 8000b24:	dccd      	bgt.n	8000ac2 <main+0x3b6>
 8000b26:	e02d      	b.n	8000b84 <main+0x478>
					  break;
 8000b28:	bf00      	nop
				  //test d
			  }
			  while(leftS > 830){
 8000b2a:	e02b      	b.n	8000b84 <main+0x478>
				  leftS = left_sensor(GPIO_InitStruct);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b34:	f7ff fd84 	bl	8000640 <left_sensor>
 8000b38:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b44:	f7ff fd3e 	bl	80005c4 <right_sensor>
 8000b48:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 8000b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000b50:	f240 2212 	movw	r2, #530	@ 0x212
 8000b54:	4293      	cmp	r3, r2
 8000b56:	dd05      	ble.n	8000b64 <main+0x458>
 8000b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000b5c:	f240 323e 	movw	r2, #830	@ 0x33e
 8000b60:	4293      	cmp	r3, r2
 8000b62:	dc16      	bgt.n	8000b92 <main+0x486>
					  break;
				  }
				  left(ccr + 25);
 8000b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b68:	3319      	adds	r3, #25
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fd0a 	bl	8000584 <left>
				  //test e
				  transmit = 101;
 8000b70:	4b73      	ldr	r3, [pc, #460]	@ (8000d40 <main+0x634>)
 8000b72:	2265      	movs	r2, #101	@ 0x65
 8000b74:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4970      	ldr	r1, [pc, #448]	@ (8000d40 <main+0x634>)
 8000b7e:	4871      	ldr	r0, [pc, #452]	@ (8000d44 <main+0x638>)
 8000b80:	f003 fed0 	bl	8004924 <HAL_UART_Transmit>
			  while(leftS > 830){
 8000b84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000b88:	f240 323e 	movw	r2, #830	@ 0x33e
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	dccd      	bgt.n	8000b2c <main+0x420>
 8000b90:	e000      	b.n	8000b94 <main+0x488>
					  break;
 8000b92:	bf00      	nop
	  while(find_shape == 1){
 8000b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	f43f aede 	beq.w	800095a <main+0x24e>
				  //test e
			  }
		  }
	  }

 	 if(genre == 1 || genre == 3){
 8000b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d01c      	beq.n	8000be0 <main+0x4d4>
 8000ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d137      	bne.n	8000c1e <main+0x512>
		  while(leftS > 830){
 8000bae:	e017      	b.n	8000be0 <main+0x4d4>
			  //test t
			  transmit = 116;
 8000bb0:	4b63      	ldr	r3, [pc, #396]	@ (8000d40 <main+0x634>)
 8000bb2:	2274      	movs	r2, #116	@ 0x74
 8000bb4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4960      	ldr	r1, [pc, #384]	@ (8000d40 <main+0x634>)
 8000bbe:	4861      	ldr	r0, [pc, #388]	@ (8000d44 <main+0x638>)
 8000bc0:	f003 feb0 	bl	8004924 <HAL_UART_Transmit>
			  //test t
			  left(ccr + 25);
 8000bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000bc8:	3319      	adds	r3, #25
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fcda 	bl	8000584 <left>
			  leftS = left_sensor(GPIO_InitStruct);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd8:	f7ff fd32 	bl	8000640 <left_sensor>
 8000bdc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  while(leftS > 830){
 8000be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000be4:	f240 323e 	movw	r2, #830	@ 0x33e
 8000be8:	4293      	cmp	r3, r2
 8000bea:	dce1      	bgt.n	8000bb0 <main+0x4a4>
 	 if(genre == 1 || genre == 3){
 8000bec:	e01d      	b.n	8000c2a <main+0x51e>
		  }
 	 }
 	 else{
		  while(rightS > 530){
			  //test f
			  transmit = 102;
 8000bee:	4b54      	ldr	r3, [pc, #336]	@ (8000d40 <main+0x634>)
 8000bf0:	2266      	movs	r2, #102	@ 0x66
 8000bf2:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4951      	ldr	r1, [pc, #324]	@ (8000d40 <main+0x634>)
 8000bfc:	4851      	ldr	r0, [pc, #324]	@ (8000d44 <main+0x638>)
 8000bfe:	f003 fe91 	bl	8004924 <HAL_UART_Transmit>
			  //test f
			  right(ccr + 25);
 8000c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c06:	3319      	adds	r3, #25
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc9b 	bl	8000544 <right>
			  rightS = right_sensor(GPIO_InitStruct);
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c16:	f7ff fcd5 	bl	80005c4 <right_sensor>
 8000c1a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  while(rightS > 530){
 8000c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000c22:	f240 2212 	movw	r2, #530	@ 0x212
 8000c26:	4293      	cmp	r3, r2
 8000c28:	dce1      	bgt.n	8000bee <main+0x4e2>
		  }
 	 }

 	 //state: find_shape part 2
	  find_shape = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  while(find_shape == 1){
 8000c30:	e0ca      	b.n	8000dc8 <main+0x6bc>
		  //test g
		  transmit = 103;
 8000c32:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <main+0x634>)
 8000c34:	2267      	movs	r2, #103	@ 0x67
 8000c36:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4940      	ldr	r1, [pc, #256]	@ (8000d40 <main+0x634>)
 8000c40:	4840      	ldr	r0, [pc, #256]	@ (8000d44 <main+0x638>)
 8000c42:	f003 fe6f 	bl	8004924 <HAL_UART_Transmit>
		  //test g
		  forward(ccr);
 8000c46:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8000c4a:	f7ff fc5b 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c56:	f7ff fcb5 	bl	80005c4 <right_sensor>
 8000c5a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c66:	f7ff fceb 	bl	8000640 <left_sensor>
 8000c6a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  if(rightS > 530 && leftS > 830) {
 8000c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000c72:	f240 2212 	movw	r2, #530	@ 0x212
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd13      	ble.n	8000ca2 <main+0x596>
 8000c7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000c7e:	f240 323e 	movw	r2, #830	@ 0x33e
 8000c82:	4293      	cmp	r3, r2
 8000c84:	dd0d      	ble.n	8000ca2 <main+0x596>
			  //test h
			  transmit = 104;
 8000c86:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <main+0x634>)
 8000c88:	2268      	movs	r2, #104	@ 0x68
 8000c8a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	2201      	movs	r2, #1
 8000c92:	492b      	ldr	r1, [pc, #172]	@ (8000d40 <main+0x634>)
 8000c94:	482b      	ldr	r0, [pc, #172]	@ (8000d44 <main+0x638>)
 8000c96:	f003 fe45 	bl	8004924 <HAL_UART_Transmit>
			  //test h
			  find_shape = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			  break;
 8000ca0:	e097      	b.n	8000dd2 <main+0x6c6>
		  }
		  else if(!(rightS > 530 && leftS > 830)){
 8000ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ca6:	f240 2212 	movw	r2, #530	@ 0x212
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dd41      	ble.n	8000d32 <main+0x626>
 8000cae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000cb2:	f240 323e 	movw	r2, #830	@ 0x33e
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	f300 8086 	bgt.w	8000dc8 <main+0x6bc>
			  while(rightS > 530){
 8000cbc:	e039      	b.n	8000d32 <main+0x626>
				  leftS = left_sensor(GPIO_InitStruct);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc6:	f7ff fcbb 	bl	8000640 <left_sensor>
 8000cca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd6:	f7ff fc75 	bl	80005c4 <right_sensor>
 8000cda:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830) {
 8000cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ce2:	f240 2212 	movw	r2, #530	@ 0x212
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	dd13      	ble.n	8000d12 <main+0x606>
 8000cea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000cee:	f240 323e 	movw	r2, #830	@ 0x33e
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	dd0d      	ble.n	8000d12 <main+0x606>
					  //test j
					  transmit = 106;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <main+0x634>)
 8000cf8:	226a      	movs	r2, #106	@ 0x6a
 8000cfa:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	2201      	movs	r2, #1
 8000d02:	490f      	ldr	r1, [pc, #60]	@ (8000d40 <main+0x634>)
 8000d04:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <main+0x638>)
 8000d06:	f003 fe0d 	bl	8004924 <HAL_UART_Transmit>
					  //test j
					  find_shape = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 8000d10:	e015      	b.n	8000d3e <main+0x632>
				  }
				  right(ccr + 25);
 8000d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d16:	3319      	adds	r3, #25
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc13 	bl	8000544 <right>
				  //test i
				  transmit = 105;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <main+0x634>)
 8000d20:	2269      	movs	r2, #105	@ 0x69
 8000d22:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4905      	ldr	r1, [pc, #20]	@ (8000d40 <main+0x634>)
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <main+0x638>)
 8000d2e:	f003 fdf9 	bl	8004924 <HAL_UART_Transmit>
			  while(rightS > 530){
 8000d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000d36:	f240 2212 	movw	r2, #530	@ 0x212
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dcbf      	bgt.n	8000cbe <main+0x5b2>
				  //test i
			  }
			  while(leftS > 830){
 8000d3e:	e03d      	b.n	8000dbc <main+0x6b0>
 8000d40:	20000000 	.word	0x20000000
 8000d44:	200001e8 	.word	0x200001e8
				  leftS = left_sensor(GPIO_InitStruct);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d50:	f7ff fc76 	bl	8000640 <left_sensor>
 8000d54:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	f7ff fc30 	bl	80005c4 <right_sensor>
 8000d64:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 8000d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000d6c:	f240 2212 	movw	r2, #530	@ 0x212
 8000d70:	4293      	cmp	r3, r2
 8000d72:	dd13      	ble.n	8000d9c <main+0x690>
 8000d74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000d78:	f240 323e 	movw	r2, #830	@ 0x33e
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	dd0d      	ble.n	8000d9c <main+0x690>
					  //test l
					  transmit = 108;
 8000d80:	4bbb      	ldr	r3, [pc, #748]	@ (8001070 <main+0x964>)
 8000d82:	226c      	movs	r2, #108	@ 0x6c
 8000d84:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	49b8      	ldr	r1, [pc, #736]	@ (8001070 <main+0x964>)
 8000d8e:	48b9      	ldr	r0, [pc, #740]	@ (8001074 <main+0x968>)
 8000d90:	f003 fdc8 	bl	8004924 <HAL_UART_Transmit>
					  //test l
					  find_shape = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 8000d9a:	e015      	b.n	8000dc8 <main+0x6bc>
				  }
				  left(ccr + 25);
 8000d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000da0:	3319      	adds	r3, #25
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fbee 	bl	8000584 <left>
				  //test k
				  transmit = 107;
 8000da8:	4bb1      	ldr	r3, [pc, #708]	@ (8001070 <main+0x964>)
 8000daa:	226b      	movs	r2, #107	@ 0x6b
 8000dac:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2201      	movs	r2, #1
 8000db4:	49ae      	ldr	r1, [pc, #696]	@ (8001070 <main+0x964>)
 8000db6:	48af      	ldr	r0, [pc, #700]	@ (8001074 <main+0x968>)
 8000db8:	f003 fdb4 	bl	8004924 <HAL_UART_Transmit>
			  while(leftS > 830){
 8000dbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000dc0:	f240 323e 	movw	r2, #830	@ 0x33e
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	dcbf      	bgt.n	8000d48 <main+0x63c>
	  while(find_shape == 1){
 8000dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	f43f af30 	beq.w	8000c32 <main+0x526>
				  //test k
			  }
	  	  }
	  }
	  while(rightS > 530){
 8000dd2:	e017      	b.n	8000e04 <main+0x6f8>
		  //test m
		  transmit = 109;
 8000dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8001070 <main+0x964>)
 8000dd6:	226d      	movs	r2, #109	@ 0x6d
 8000dd8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	2201      	movs	r2, #1
 8000de0:	49a3      	ldr	r1, [pc, #652]	@ (8001070 <main+0x964>)
 8000de2:	48a4      	ldr	r0, [pc, #656]	@ (8001074 <main+0x968>)
 8000de4:	f003 fd9e 	bl	8004924 <HAL_UART_Transmit>
		  //test m
		  right(ccr + 25);
 8000de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000dec:	3319      	adds	r3, #25
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fba8 	bl	8000544 <right>
		  rightS = right_sensor(GPIO_InitStruct);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfc:	f7ff fbe2 	bl	80005c4 <right_sensor>
 8000e00:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  while(rightS > 530){
 8000e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e08:	f240 2212 	movw	r2, #530	@ 0x212
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	dce1      	bgt.n	8000dd4 <main+0x6c8>
	  }

	  //state: dance_party for genre 1 and 3
	  party = 1;
 8000e10:	4b99      	ldr	r3, [pc, #612]	@ (8001078 <main+0x96c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
	  while(party == 1 && (tim9_time < length * 10)){
 8000e16:	e0b9      	b.n	8000f8c <main+0x880>
		  //test n
		  transmit = 110;
 8000e18:	4b95      	ldr	r3, [pc, #596]	@ (8001070 <main+0x964>)
 8000e1a:	226e      	movs	r2, #110	@ 0x6e
 8000e1c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	2201      	movs	r2, #1
 8000e24:	4992      	ldr	r1, [pc, #584]	@ (8001070 <main+0x964>)
 8000e26:	4893      	ldr	r0, [pc, #588]	@ (8001074 <main+0x968>)
 8000e28:	f003 fd7c 	bl	8004924 <HAL_UART_Transmit>
		  //test n
		  forward(ccr);
 8000e2c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8000e30:	f7ff fb68 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3c:	f7ff fbc2 	bl	80005c4 <right_sensor>
 8000e40:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	f7ff fbf8 	bl	8000640 <left_sensor>
 8000e50:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  while(rightS > 600 && leftS > 900) {
 8000e54:	e01d      	b.n	8000e92 <main+0x786>
			  //test o
			  transmit = 111;
 8000e56:	4b86      	ldr	r3, [pc, #536]	@ (8001070 <main+0x964>)
 8000e58:	226f      	movs	r2, #111	@ 0x6f
 8000e5a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	2201      	movs	r2, #1
 8000e62:	4983      	ldr	r1, [pc, #524]	@ (8001070 <main+0x964>)
 8000e64:	4883      	ldr	r0, [pc, #524]	@ (8001074 <main+0x968>)
 8000e66:	f003 fd5d 	bl	8004924 <HAL_UART_Transmit>
			  //test o
			  forward(ccr);
 8000e6a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8000e6e:	f7ff fb49 	bl	8000504 <forward>
			  rightS = right_sensor(GPIO_InitStruct);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7a:	f7ff fba3 	bl	80005c4 <right_sensor>
 8000e7e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
			  leftS = left_sensor(GPIO_InitStruct);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8a:	f7ff fbd9 	bl	8000640 <left_sensor>
 8000e8e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  while(rightS > 600 && leftS > 900) {
 8000e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e96:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e9a:	dd04      	ble.n	8000ea6 <main+0x79a>
 8000e9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ea0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000ea4:	dcd7      	bgt.n	8000e56 <main+0x74a>
		  }
		  if(!(rightS > 600 && leftS > 900)){
 8000ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eaa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000eae:	dd35      	ble.n	8000f1c <main+0x810>
 8000eb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000eb4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000eb8:	dc63      	bgt.n	8000f82 <main+0x876>
			  while(rightS > 530){
 8000eba:	e02f      	b.n	8000f1c <main+0x810>
				  leftS = left_sensor(GPIO_InitStruct);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec4:	f7ff fbbc 	bl	8000640 <left_sensor>
 8000ec8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed4:	f7ff fb76 	bl	80005c4 <right_sensor>
 8000ed8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(leftS > 900){
 8000edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ee0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000ee4:	dd0a      	ble.n	8000efc <main+0x7f0>
					  //test q
					  transmit = 113;
 8000ee6:	4b62      	ldr	r3, [pc, #392]	@ (8001070 <main+0x964>)
 8000ee8:	2271      	movs	r2, #113	@ 0x71
 8000eea:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	495f      	ldr	r1, [pc, #380]	@ (8001070 <main+0x964>)
 8000ef4:	485f      	ldr	r0, [pc, #380]	@ (8001074 <main+0x968>)
 8000ef6:	f003 fd15 	bl	8004924 <HAL_UART_Transmit>
					  //test q
					  break;
 8000efa:	e015      	b.n	8000f28 <main+0x81c>
				  }
				  right(ccr + 25);
 8000efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000f00:	3319      	adds	r3, #25
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb1e 	bl	8000544 <right>
				  //test p
				  transmit = 112;
 8000f08:	4b59      	ldr	r3, [pc, #356]	@ (8001070 <main+0x964>)
 8000f0a:	2270      	movs	r2, #112	@ 0x70
 8000f0c:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2201      	movs	r2, #1
 8000f14:	4956      	ldr	r1, [pc, #344]	@ (8001070 <main+0x964>)
 8000f16:	4857      	ldr	r0, [pc, #348]	@ (8001074 <main+0x968>)
 8000f18:	f003 fd04 	bl	8004924 <HAL_UART_Transmit>
			  while(rightS > 530){
 8000f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f20:	f240 2212 	movw	r2, #530	@ 0x212
 8000f24:	4293      	cmp	r3, r2
 8000f26:	dcc9      	bgt.n	8000ebc <main+0x7b0>
				  //test p
			  }
			  while(leftS > 830){
 8000f28:	e025      	b.n	8000f76 <main+0x86a>
				  leftS = left_sensor(GPIO_InitStruct);
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f32:	f7ff fb85 	bl	8000640 <left_sensor>
 8000f36:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f42:	f7ff fb3f 	bl	80005c4 <right_sensor>
 8000f46:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 600){
 8000f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f4e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000f52:	dd0a      	ble.n	8000f6a <main+0x85e>
					  //test s
					  transmit = 115;
 8000f54:	4b46      	ldr	r3, [pc, #280]	@ (8001070 <main+0x964>)
 8000f56:	2273      	movs	r2, #115	@ 0x73
 8000f58:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4943      	ldr	r1, [pc, #268]	@ (8001070 <main+0x964>)
 8000f62:	4844      	ldr	r0, [pc, #272]	@ (8001074 <main+0x968>)
 8000f64:	f003 fcde 	bl	8004924 <HAL_UART_Transmit>
					  //test s
					  break;
 8000f68:	e00b      	b.n	8000f82 <main+0x876>
				  }
				  left(ccr + 25);
 8000f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000f6e:	3319      	adds	r3, #25
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb07 	bl	8000584 <left>
			  while(leftS > 830){
 8000f76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f7a:	f240 323e 	movw	r2, #830	@ 0x33e
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	dcd3      	bgt.n	8000f2a <main+0x81e>
			  }
		  }
		  tim9_time = __HAL_TIM_GET_COUNTER(&htim9);
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <main+0x970>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	  while(party == 1 && (tim9_time < length * 10)){
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001078 <main+0x96c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10b      	bne.n	8000fac <main+0x8a0>
 8000f94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f6ff af36 	blt.w	8000e18 <main+0x70c>
	  }

	  //return part 1
	  find_shape = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  while(find_shape == 1){
 8000fb2:	e091      	b.n	80010d8 <main+0x9cc>
		  forward(ccr);
 8000fb4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8000fb8:	f7ff faa4 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc4:	f7ff fafe 	bl	80005c4 <right_sensor>
 8000fc8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd4:	f7ff fb34 	bl	8000640 <left_sensor>
 8000fd8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  if(rightS > 530 && leftS > 830) {
 8000fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fe0:	f240 2212 	movw	r2, #530	@ 0x212
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	dd09      	ble.n	8000ffc <main+0x8f0>
 8000fe8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fec:	f240 323e 	movw	r2, #830	@ 0x33e
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	dd03      	ble.n	8000ffc <main+0x8f0>
			  find_shape = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			  break;
 8000ffa:	e072      	b.n	80010e2 <main+0x9d6>
		  }
		  else if(!(rightS > 530 && leftS > 830)){
 8000ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001000:	f240 2212 	movw	r2, #530	@ 0x212
 8001004:	4293      	cmp	r3, r2
 8001006:	dd2c      	ble.n	8001062 <main+0x956>
 8001008:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800100c:	f240 323e 	movw	r2, #830	@ 0x33e
 8001010:	4293      	cmp	r3, r2
 8001012:	dc61      	bgt.n	80010d8 <main+0x9cc>
			  while(rightS > 530){
 8001014:	e025      	b.n	8001062 <main+0x956>
				  leftS = left_sensor(GPIO_InitStruct);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101e:	f7ff fb0f 	bl	8000640 <left_sensor>
 8001022:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	f7ff fac9 	bl	80005c4 <right_sensor>
 8001032:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830) {
 8001036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800103a:	f240 2212 	movw	r2, #530	@ 0x212
 800103e:	4293      	cmp	r3, r2
 8001040:	dd09      	ble.n	8001056 <main+0x94a>
 8001042:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001046:	f240 323e 	movw	r2, #830	@ 0x33e
 800104a:	4293      	cmp	r3, r2
 800104c:	dd03      	ble.n	8001056 <main+0x94a>
					  find_shape = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 8001054:	e00b      	b.n	800106e <main+0x962>
				  }
				  right(ccr + 25);
 8001056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800105a:	3319      	adds	r3, #25
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa71 	bl	8000544 <right>
			  while(rightS > 530){
 8001062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001066:	f240 2212 	movw	r2, #530	@ 0x212
 800106a:	4293      	cmp	r3, r2
 800106c:	dcd3      	bgt.n	8001016 <main+0x90a>
			  }
			  while(leftS > 830){
 800106e:	e02d      	b.n	80010cc <main+0x9c0>
 8001070:	20000000 	.word	0x20000000
 8001074:	200001e8 	.word	0x200001e8
 8001078:	20000030 	.word	0x20000030
 800107c:	200001a0 	.word	0x200001a0
				  leftS = left_sensor(GPIO_InitStruct);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001088:	f7ff fada 	bl	8000640 <left_sensor>
 800108c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001098:	f7ff fa94 	bl	80005c4 <right_sensor>
 800109c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 80010a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010a4:	f240 2212 	movw	r2, #530	@ 0x212
 80010a8:	4293      	cmp	r3, r2
 80010aa:	dd09      	ble.n	80010c0 <main+0x9b4>
 80010ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010b0:	f240 323e 	movw	r2, #830	@ 0x33e
 80010b4:	4293      	cmp	r3, r2
 80010b6:	dd03      	ble.n	80010c0 <main+0x9b4>
					  find_shape = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 80010be:	e00b      	b.n	80010d8 <main+0x9cc>
				  }
				  left(ccr + 25);
 80010c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80010c4:	3319      	adds	r3, #25
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa5c 	bl	8000584 <left>
			  while(leftS > 830){
 80010cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010d0:	f240 323e 	movw	r2, #830	@ 0x33e
 80010d4:	4293      	cmp	r3, r2
 80010d6:	dcd3      	bgt.n	8001080 <main+0x974>
	  while(find_shape == 1){
 80010d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f43f af69 	beq.w	8000fb4 <main+0x8a8>
			  }
	  	  }
	  }

	  while(rightS > 530){
 80010e2:	e00d      	b.n	8001100 <main+0x9f4>
			  right(ccr + 25);
 80010e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80010e8:	3319      	adds	r3, #25
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa2a 	bl	8000544 <right>
			  rightS = right_sensor(GPIO_InitStruct);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	f7ff fa64 	bl	80005c4 <right_sensor>
 80010fc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  while(rightS > 530){
 8001100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001104:	f240 2212 	movw	r2, #530	@ 0x212
 8001108:	4293      	cmp	r3, r2
 800110a:	dceb      	bgt.n	80010e4 <main+0x9d8>
	  }

	  //return part 2
	  find_shape = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  while(find_shape == 1){
 8001112:	e089      	b.n	8001228 <main+0xb1c>
		  forward(ccr);
 8001114:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001118:	f7ff f9f4 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	f7ff fa4e 	bl	80005c4 <right_sensor>
 8001128:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001134:	f7ff fa84 	bl	8000640 <left_sensor>
 8001138:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  if(rightS > 530 && leftS > 830) {
 800113c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001140:	f240 2212 	movw	r2, #530	@ 0x212
 8001144:	4293      	cmp	r3, r2
 8001146:	dd09      	ble.n	800115c <main+0xa50>
 8001148:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800114c:	f240 323e 	movw	r2, #830	@ 0x33e
 8001150:	4293      	cmp	r3, r2
 8001152:	dd03      	ble.n	800115c <main+0xa50>
			  find_shape = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			  break;
 800115a:	e06a      	b.n	8001232 <main+0xb26>
		  }
		  else if(!(rightS > 530 && leftS > 830)){
 800115c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001160:	f240 2212 	movw	r2, #530	@ 0x212
 8001164:	4293      	cmp	r3, r2
 8001166:	dd2c      	ble.n	80011c2 <main+0xab6>
 8001168:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800116c:	f240 323e 	movw	r2, #830	@ 0x33e
 8001170:	4293      	cmp	r3, r2
 8001172:	dc59      	bgt.n	8001228 <main+0xb1c>
			  while(rightS > 530){
 8001174:	e025      	b.n	80011c2 <main+0xab6>
				  leftS = left_sensor(GPIO_InitStruct);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117e:	f7ff fa5f 	bl	8000640 <left_sensor>
 8001182:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118e:	f7ff fa19 	bl	80005c4 <right_sensor>
 8001192:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830) {
 8001196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800119a:	f240 2212 	movw	r2, #530	@ 0x212
 800119e:	4293      	cmp	r3, r2
 80011a0:	dd09      	ble.n	80011b6 <main+0xaaa>
 80011a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011a6:	f240 323e 	movw	r2, #830	@ 0x33e
 80011aa:	4293      	cmp	r3, r2
 80011ac:	dd03      	ble.n	80011b6 <main+0xaaa>
					  find_shape = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 80011b4:	e00b      	b.n	80011ce <main+0xac2>
				  }
				  right(ccr + 25);
 80011b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011ba:	3319      	adds	r3, #25
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c1 	bl	8000544 <right>
			  while(rightS > 530){
 80011c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011c6:	f240 2212 	movw	r2, #530	@ 0x212
 80011ca:	4293      	cmp	r3, r2
 80011cc:	dcd3      	bgt.n	8001176 <main+0xa6a>
			  }
			  while(leftS > 830){
 80011ce:	e025      	b.n	800121c <main+0xb10>
				  leftS = left_sensor(GPIO_InitStruct);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d8:	f7ff fa32 	bl	8000640 <left_sensor>
 80011dc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	f7ff f9ec 	bl	80005c4 <right_sensor>
 80011ec:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 80011f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011f4:	f240 2212 	movw	r2, #530	@ 0x212
 80011f8:	4293      	cmp	r3, r2
 80011fa:	dd09      	ble.n	8001210 <main+0xb04>
 80011fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001200:	f240 323e 	movw	r2, #830	@ 0x33e
 8001204:	4293      	cmp	r3, r2
 8001206:	dd03      	ble.n	8001210 <main+0xb04>
					  find_shape = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					  break;
 800120e:	e00b      	b.n	8001228 <main+0xb1c>
				  }
				  left(ccr + 25);
 8001210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001214:	3319      	adds	r3, #25
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9b4 	bl	8000584 <left>
			  while(leftS > 830){
 800121c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001220:	f240 323e 	movw	r2, #830	@ 0x33e
 8001224:	4293      	cmp	r3, r2
 8001226:	dcd3      	bgt.n	80011d0 <main+0xac4>
	  while(find_shape == 1){
 8001228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800122c:	2b01      	cmp	r3, #1
 800122e:	f43f af71 	beq.w	8001114 <main+0xa08>
			  }
		  }
	  }

	  if(genre == 2 || genre == 4){
 8001232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001236:	2b02      	cmp	r3, #2
 8001238:	d012      	beq.n	8001260 <main+0xb54>
 800123a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800123e:	2b04      	cmp	r3, #4
 8001240:	d123      	bne.n	800128a <main+0xb7e>
		  while(leftS > 830){
 8001242:	e00d      	b.n	8001260 <main+0xb54>
			  left(ccr + 25);
 8001244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001248:	3319      	adds	r3, #25
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f99a 	bl	8000584 <left>
			  leftS = left_sensor(GPIO_InitStruct);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001258:	f7ff f9f2 	bl	8000640 <left_sensor>
 800125c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  while(leftS > 830){
 8001260:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001264:	f240 323e 	movw	r2, #830	@ 0x33e
 8001268:	4293      	cmp	r3, r2
 800126a:	dceb      	bgt.n	8001244 <main+0xb38>
	  if(genre == 2 || genre == 4){
 800126c:	e013      	b.n	8001296 <main+0xb8a>
		  }
	  }
	  else{
		  while(rightS > 530){
			  right(ccr + 25);
 800126e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001272:	3319      	adds	r3, #25
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f965 	bl	8000544 <right>
			  rightS = right_sensor(GPIO_InitStruct);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001282:	f7ff f99f 	bl	80005c4 <right_sensor>
 8001286:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  while(rightS > 530){
 800128a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800128e:	f240 2212 	movw	r2, #530	@ 0x212
 8001292:	4293      	cmp	r3, r2
 8001294:	dceb      	bgt.n	800126e <main+0xb62>
		  }
	  }


	  //return part 3
	  find_shape = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  intersection = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  while(find_shape == 1){
 80012a2:	e0c8      	b.n	8001436 <main+0xd2a>
		  forward(ccr);
 80012a4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80012a8:	f7ff f92c 	bl	8000504 <forward>
		  rightS = right_sensor(GPIO_InitStruct);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b4:	f7ff f986 	bl	80005c4 <right_sensor>
 80012b8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		  leftS = left_sensor(GPIO_InitStruct);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	f7ff f9bc 	bl	8000640 <left_sensor>
 80012c8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		  if(rightS > 530 && leftS > 830) {
 80012cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012d0:	f240 2212 	movw	r2, #530	@ 0x212
 80012d4:	4293      	cmp	r3, r2
 80012d6:	dd4c      	ble.n	8001372 <main+0xc66>
 80012d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012dc:	f240 323e 	movw	r2, #830	@ 0x33e
 80012e0:	4293      	cmp	r3, r2
 80012e2:	dd46      	ble.n	8001372 <main+0xc66>
			  if((genre == 1 || genre == 2) && intersection == 0){
 80012e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d003      	beq.n	80012f4 <main+0xbe8>
 80012ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d107      	bne.n	8001304 <main+0xbf8>
 80012f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <main+0xbf8>
				  find_shape = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				  break;
 8001302:	e09d      	b.n	8001440 <main+0xd34>
			  }
			  else if(intersection == 1){
 8001304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001308:	2b01      	cmp	r3, #1
 800130a:	d103      	bne.n	8001314 <main+0xc08>
				  find_shape = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				  break;
 8001312:	e095      	b.n	8001440 <main+0xd34>
			  }
			  if(genre == 3 || genre == 4){
 8001314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001318:	2b03      	cmp	r3, #3
 800131a:	d018      	beq.n	800134e <main+0xc42>
 800131c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001320:	2b04      	cmp	r3, #4
 8001322:	d120      	bne.n	8001366 <main+0xc5a>
				  while(rightS > 530 && leftS > 830){
 8001324:	e013      	b.n	800134e <main+0xc42>
					  forward(ccr);
 8001326:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800132a:	f7ff f8eb 	bl	8000504 <forward>
					  rightS = right_sensor(GPIO_InitStruct);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001336:	f7ff f945 	bl	80005c4 <right_sensor>
 800133a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
					  leftS = left_sensor(GPIO_InitStruct);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001346:	f7ff f97b 	bl	8000640 <left_sensor>
 800134a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  while(rightS > 530 && leftS > 830){
 800134e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001352:	f240 2212 	movw	r2, #530	@ 0x212
 8001356:	4293      	cmp	r3, r2
 8001358:	dd05      	ble.n	8001366 <main+0xc5a>
 800135a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800135e:	f240 323e 	movw	r2, #830	@ 0x33e
 8001362:	4293      	cmp	r3, r2
 8001364:	dcdf      	bgt.n	8001326 <main+0xc1a>
				  }
			  }
			  intersection++;
 8001366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001370:	e061      	b.n	8001436 <main+0xd2a>
		  }
		  else if(!(rightS > 530 && leftS > 830)){
 8001372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001376:	f240 2212 	movw	r2, #530	@ 0x212
 800137a:	4293      	cmp	r3, r2
 800137c:	dd28      	ble.n	80013d0 <main+0xcc4>
 800137e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001382:	f240 323e 	movw	r2, #830	@ 0x33e
 8001386:	4293      	cmp	r3, r2
 8001388:	dc55      	bgt.n	8001436 <main+0xd2a>
			  while(rightS > 530){
 800138a:	e021      	b.n	80013d0 <main+0xcc4>
				  leftS = left_sensor(GPIO_InitStruct);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	f7ff f954 	bl	8000640 <left_sensor>
 8001398:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a4:	f7ff f90e 	bl	80005c4 <right_sensor>
 80013a8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 80013ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013b0:	f240 2212 	movw	r2, #530	@ 0x212
 80013b4:	4293      	cmp	r3, r2
 80013b6:	dd05      	ble.n	80013c4 <main+0xcb8>
 80013b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80013bc:	f240 323e 	movw	r2, #830	@ 0x33e
 80013c0:	4293      	cmp	r3, r2
 80013c2:	dc0c      	bgt.n	80013de <main+0xcd2>
					  break;
				  }
				  right(ccr + 25);
 80013c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013c8:	3319      	adds	r3, #25
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8ba 	bl	8000544 <right>
			  while(rightS > 530){
 80013d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013d4:	f240 2212 	movw	r2, #530	@ 0x212
 80013d8:	4293      	cmp	r3, r2
 80013da:	dcd7      	bgt.n	800138c <main+0xc80>
 80013dc:	e023      	b.n	8001426 <main+0xd1a>
					  break;
 80013de:	bf00      	nop
			  }
			  while(leftS > 830){
 80013e0:	e021      	b.n	8001426 <main+0xd1a>
				  leftS = left_sensor(GPIO_InitStruct);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ea:	f7ff f929 	bl	8000640 <left_sensor>
 80013ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				  rightS = right_sensor(GPIO_InitStruct);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fa:	f7ff f8e3 	bl	80005c4 <right_sensor>
 80013fe:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				  if(rightS > 530 && leftS > 830){
 8001402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001406:	f240 2212 	movw	r2, #530	@ 0x212
 800140a:	4293      	cmp	r3, r2
 800140c:	dd05      	ble.n	800141a <main+0xd0e>
 800140e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001412:	f240 323e 	movw	r2, #830	@ 0x33e
 8001416:	4293      	cmp	r3, r2
 8001418:	dc0c      	bgt.n	8001434 <main+0xd28>
					  break;
				  }
				  left(ccr + 25);
 800141a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800141e:	3319      	adds	r3, #25
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f8af 	bl	8000584 <left>
			  while(leftS > 830){
 8001426:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800142a:	f240 323e 	movw	r2, #830	@ 0x33e
 800142e:	4293      	cmp	r3, r2
 8001430:	dcd7      	bgt.n	80013e2 <main+0xcd6>
 8001432:	e000      	b.n	8001436 <main+0xd2a>
					  break;
 8001434:	bf00      	nop
	  while(find_shape == 1){
 8001436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800143a:	2b01      	cmp	r3, #1
 800143c:	f43f af32 	beq.w	80012a4 <main+0xb98>
			  }
		  }
	  }
	  stop();
 8001440:	f7ff f93e 	bl	80006c0 <stop>
 {
 8001444:	f7ff ba39 	b.w	80008ba <main+0x1ae>

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f004 fa6a 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <SystemClock_Config+0xcc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a27      	ldr	r2, [pc, #156]	@ (8001514 <SystemClock_Config+0xcc>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <SystemClock_Config+0xcc>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <SystemClock_Config+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <SystemClock_Config+0xd0>)
 8001492:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <SystemClock_Config+0xd0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	2310      	movs	r3, #16
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b0:	2302      	movs	r3, #2
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014b8:	2310      	movs	r3, #16
 80014ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c2:	2304      	movs	r3, #4
 80014c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fa10 	bl	80028f4 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014da:	f000 fba1 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV128;
 80014e6:	23d0      	movs	r3, #208	@ 0xd0
 80014e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fc72 	bl	8002de4 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001506:	f000 fb8b 	bl	8001c20 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3750      	adds	r7, #80	@ 0x50
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b096      	sub	sp, #88	@ 0x58
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2220      	movs	r2, #32
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f9eb 	bl	8005930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <MX_TIM1_Init+0x138>)
 800155c:	4a3e      	ldr	r2, [pc, #248]	@ (8001658 <MX_TIM1_Init+0x13c>)
 800155e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001560:	4b3c      	ldr	r3, [pc, #240]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001562:	2263      	movs	r2, #99	@ 0x63
 8001564:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <MX_TIM1_Init+0x138>)
 800156e:	2263      	movs	r2, #99	@ 0x63
 8001570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001578:	4b36      	ldr	r3, [pc, #216]	@ (8001654 <MX_TIM1_Init+0x138>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001584:	4833      	ldr	r0, [pc, #204]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001586:	f001 fe4d 	bl	8003224 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001590:	f000 fb46 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800159e:	4619      	mov	r1, r3
 80015a0:	482c      	ldr	r0, [pc, #176]	@ (8001654 <MX_TIM1_Init+0x138>)
 80015a2:	f002 fbab 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015ac:	f000 fb38 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b0:	4828      	ldr	r0, [pc, #160]	@ (8001654 <MX_TIM1_Init+0x138>)
 80015b2:	f001 fee1 	bl	8003378 <HAL_TIM_PWM_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015bc:	f000 fb30 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015cc:	4619      	mov	r1, r3
 80015ce:	4821      	ldr	r0, [pc, #132]	@ (8001654 <MX_TIM1_Init+0x138>)
 80015d0:	f003 f884 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015da:	f000 fb21 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	@ 0x60
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fe:	2208      	movs	r2, #8
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001604:	f002 fab8 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800160e:	f000 fb07 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001636:	f003 f8bf 	bl	80047b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001640:	f000 faee 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MX_TIM1_Init+0x138>)
 8001646:	f000 fc09 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 800164a:	bf00      	nop
 800164c:	3758      	adds	r7, #88	@ 0x58
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000038 	.word	0x20000038
 8001658:	40010000 	.word	0x40010000

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001686:	4b2c      	ldr	r3, [pc, #176]	@ (8001738 <MX_TIM2_Init+0xdc>)
 8001688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <MX_TIM2_Init+0xdc>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <MX_TIM2_Init+0xdc>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800169a:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_TIM2_Init+0xdc>)
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ae:	4822      	ldr	r0, [pc, #136]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016b0:	f001 fdb8 	bl	8003224 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80016ba:	f000 fab1 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	4619      	mov	r1, r3
 80016ca:	481b      	ldr	r0, [pc, #108]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016cc:	f002 fb16 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016d6:	f000 faa3 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016da:	4817      	ldr	r0, [pc, #92]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016dc:	f001 ff4c 	bl	8003578 <HAL_TIM_IC_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016e6:	f000 fa9b 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_TIM2_Init+0xdc>)
 80016fa:	f002 ffef 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001704:	f000 fa8c 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001708:	2300      	movs	r3, #0
 800170a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800170c:	2301      	movs	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_TIM2_Init+0xdc>)
 8001720:	f002 f98e 	bl	8003a40 <HAL_TIM_IC_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800172a:	f000 fa79 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000080 	.word	0x20000080

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 8001760:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <MX_TIM3_Init+0xac>)
 8001762:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 8001766:	2209      	movs	r2, #9
 8001768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 8001772:	2263      	movs	r2, #99	@ 0x63
 8001774:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001782:	4818      	ldr	r0, [pc, #96]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 8001784:	f001 fdf8 	bl	8003378 <HAL_TIM_PWM_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800178e:	f000 fa47 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	4619      	mov	r1, r3
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 80017a2:	f002 ff9b 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017ac:	f000 fa38 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b0:	2360      	movs	r3, #96	@ 0x60
 80017b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2204      	movs	r2, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 80017c8:	f002 f9d6 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017d2:	f000 fa25 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MX_TIM3_Init+0xa8>)
 80017d8:	f000 fb40 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200000c8 	.word	0x200000c8
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001810:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <MX_TIM4_Init+0xac>)
 8001812:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001816:	2209      	movs	r2, #9
 8001818:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <MX_TIM4_Init+0xa8>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001822:	2263      	movs	r2, #99	@ 0x63
 8001824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <MX_TIM4_Init+0xa8>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001832:	4818      	ldr	r0, [pc, #96]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001834:	f001 fda0 	bl	8003378 <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800183e:	f000 f9ef 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	4619      	mov	r1, r3
 8001850:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001852:	f002 ff43 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800185c:	f000 f9e0 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	@ 0x60
 8001862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001878:	f002 f97e 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001882:	f000 f9cd 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001886:	4803      	ldr	r0, [pc, #12]	@ (8001894 <MX_TIM4_Init+0xa8>)
 8001888:	f000 fae8 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	@ 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000110 	.word	0x20000110
 8001898:	40000800 	.word	0x40000800

0800189c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <MX_TIM5_Init+0xdc>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018cc:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018ec:	4821      	ldr	r0, [pc, #132]	@ (8001974 <MX_TIM5_Init+0xd8>)
 80018ee:	f001 fc99 	bl	8003224 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80018f8:	f000 f992 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001900:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	4619      	mov	r1, r3
 8001908:	481a      	ldr	r0, [pc, #104]	@ (8001974 <MX_TIM5_Init+0xd8>)
 800190a:	f002 f9f7 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001914:	f000 f984 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001918:	4816      	ldr	r0, [pc, #88]	@ (8001974 <MX_TIM5_Init+0xd8>)
 800191a:	f001 fe2d 	bl	8003578 <HAL_TIM_IC_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001924:	f000 f97c 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	480f      	ldr	r0, [pc, #60]	@ (8001974 <MX_TIM5_Init+0xd8>)
 8001938:	f002 fed0 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001942:	f000 f96d 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800194a:	2301      	movs	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	2204      	movs	r2, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_TIM5_Init+0xd8>)
 800195e:	f002 f86f 	bl	8003a40 <HAL_TIM_IC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001968:	f000 f95a 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3728      	adds	r7, #40	@ 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000158 	.word	0x20000158
 8001978:	40000c00 	.word	0x40000c00

0800197c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 8001990:	4a16      	ldr	r2, [pc, #88]	@ (80019ec <MX_TIM9_Init+0x70>)
 8001992:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 49999;
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 8001996:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800199a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 80019a4:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80019a8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80019b6:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 80019b8:	f001 fc34 	bl	8003224 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80019c2:	f000 f92d 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_TIM9_Init+0x6c>)
 80019d2:	f002 f993 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80019dc:	f000 f920 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  /* USER CODE END TIM9_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200001a0 	.word	0x200001a0
 80019ec:	40014000 	.word	0x40014000

080019f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <MX_USART6_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 80019fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <MX_USART6_UART_Init+0x4c>)
 8001a28:	f002 ff2c 	bl	8004884 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f8f5 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001e8 	.word	0x200001e8
 8001a40:	40011400 	.word	0x40011400

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a45      	ldr	r2, [pc, #276]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a37      	ldr	r2, [pc, #220]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a30      	ldr	r2, [pc, #192]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <MX_GPIO_Init+0x134>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2102      	movs	r1, #2
 8001ace:	482b      	ldr	r0, [pc, #172]	@ (8001b7c <MX_GPIO_Init+0x138>)
 8001ad0:	f000 fef6 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001ada:	4829      	ldr	r0, [pc, #164]	@ (8001b80 <MX_GPIO_Init+0x13c>)
 8001adc:	f000 fef0 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4821      	ldr	r0, [pc, #132]	@ (8001b7c <MX_GPIO_Init+0x138>)
 8001af8:	f000 fd5e 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001afc:	2302      	movs	r3, #2
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <MX_GPIO_Init+0x138>)
 8001b14:	f000 fd50 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 USART_RX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4813      	ldr	r0, [pc, #76]	@ (8001b80 <MX_GPIO_Init+0x13c>)
 8001b34:	f000 fd40 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001b38:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <MX_GPIO_Init+0x13c>)
 8001b52:	f000 fd31 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b56:	2330      	movs	r3, #48	@ 0x30
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <MX_GPIO_Init+0x140>)
 8001b6a:	f000 fd25 	bl	80025b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart6, &receive, 1); //You need to toggle a breakpoint on this line!
 8001b90:	2201      	movs	r2, #1
 8001b92:	491d      	ldr	r1, [pc, #116]	@ (8001c08 <HAL_UART_RxCpltCallback+0x80>)
 8001b94:	481d      	ldr	r0, [pc, #116]	@ (8001c0c <HAL_UART_RxCpltCallback+0x84>)
 8001b96:	f002 ff50 	bl	8004a3a <HAL_UART_Receive_IT>
  if(init == 1){
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <HAL_UART_RxCpltCallback+0x88>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d119      	bne.n	8001bd6 <HAL_UART_RxCpltCallback+0x4e>
	  if(receive > 0 && receive < 13){
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_UART_RxCpltCallback+0x80>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d02a      	beq.n	8001c00 <HAL_UART_RxCpltCallback+0x78>
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <HAL_UART_RxCpltCallback+0x80>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d826      	bhi.n	8001c00 <HAL_UART_RxCpltCallback+0x78>
		  init = 0;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_UART_RxCpltCallback+0x88>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
		  songNum = receive;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_UART_RxCpltCallback+0x80>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_UART_RxCpltCallback+0x8c>)
 8001bbe:	701a      	strb	r2, [r3, #0]
		  transmit = 97;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_UART_RxCpltCallback+0x90>)
 8001bc2:	2261      	movs	r2, #97	@ 0x61
 8001bc4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4912      	ldr	r1, [pc, #72]	@ (8001c18 <HAL_UART_RxCpltCallback+0x90>)
 8001bce:	480f      	ldr	r0, [pc, #60]	@ (8001c0c <HAL_UART_RxCpltCallback+0x84>)
 8001bd0:	f002 fea8 	bl	8004924 <HAL_UART_Transmit>
		  party = 0;
		  transmit = 222;
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
	  }
  }
}
 8001bd4:	e014      	b.n	8001c00 <HAL_UART_RxCpltCallback+0x78>
  else if(party == 1){
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_UART_RxCpltCallback+0x94>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d110      	bne.n	8001c00 <HAL_UART_RxCpltCallback+0x78>
	  if(receive == 222){
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_UART_RxCpltCallback+0x80>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2bde      	cmp	r3, #222	@ 0xde
 8001be4:	d10c      	bne.n	8001c00 <HAL_UART_RxCpltCallback+0x78>
		  party = 0;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_UART_RxCpltCallback+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
		  transmit = 222;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_UART_RxCpltCallback+0x90>)
 8001bee:	22de      	movs	r2, #222	@ 0xde
 8001bf0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, &transmit, 1, HAL_MAX_DELAY);
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <HAL_UART_RxCpltCallback+0x90>)
 8001bfa:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <HAL_UART_RxCpltCallback+0x84>)
 8001bfc:	f002 fe92 	bl	8004924 <HAL_UART_Transmit>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000034 	.word	0x20000034
 8001c0c:	200001e8 	.word	0x200001e8
 8001c10:	20000035 	.word	0x20000035
 8001c14:	20000036 	.word	0x20000036
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000030 	.word	0x20000030

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 fbd0 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	@ 0x38
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x158>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001cba:	e087      	b.n	8001dcc <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc4:	d135      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a42      	ldr	r2, [pc, #264]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d10:	2301      	movs	r3, #1
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4830      	ldr	r0, [pc, #192]	@ (8001ddc <HAL_TIM_Base_MspInit+0x160>)
 8001d1c:	f000 fc4c 	bl	80025b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	201c      	movs	r0, #28
 8001d26:	f000 fb7e 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f000 fb97 	bl	800245e <HAL_NVIC_EnableIRQ>
}
 8001d30:	e04c      	b.n	8001dcc <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM5)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <HAL_TIM_Base_MspInit+0x164>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d134      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a24      	ldr	r2, [pc, #144]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d74:	2302      	movs	r3, #2
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d84:	2302      	movs	r3, #2
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4815      	ldr	r0, [pc, #84]	@ (8001de4 <HAL_TIM_Base_MspInit+0x168>)
 8001d90:	f000 fc12 	bl	80025b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2032      	movs	r0, #50	@ 0x32
 8001d9a:	f000 fb44 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d9e:	2032      	movs	r0, #50	@ 0x32
 8001da0:	f000 fb5d 	bl	800245e <HAL_NVIC_EnableIRQ>
}
 8001da4:	e012      	b.n	8001dcc <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM9)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <HAL_TIM_Base_MspInit+0x16c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10d      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x15c>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3738      	adds	r7, #56	@ 0x38
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40000c00 	.word	0x40000c00
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40014000 	.word	0x40014000

08001dec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <HAL_TIM_PWM_MspInit+0x64>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e1a:	e012      	b.n	8001e42 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x68>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40000800 	.word	0x40000800

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_TIM_MspPostInit+0xf8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11f      	bne.n	8001ebe <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a34      	ldr	r2, [pc, #208]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4829      	ldr	r0, [pc, #164]	@ (8001f5c <HAL_TIM_MspPostInit+0x100>)
 8001eb8:	f000 fb7e 	bl	80025b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ebc:	e046      	b.n	8001f4c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_TIM_MspPostInit+0x104>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d11e      	bne.n	8001f06 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4819      	ldr	r0, [pc, #100]	@ (8001f64 <HAL_TIM_MspPostInit+0x108>)
 8001f00:	f000 fb5a 	bl	80025b8 <HAL_GPIO_Init>
}
 8001f04:	e022      	b.n	8001f4c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_TIM_MspPostInit+0x10c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d11d      	bne.n	8001f4c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f2c:	2340      	movs	r3, #64	@ 0x40
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <HAL_TIM_MspPostInit+0x110>)
 8001f48:	f000 fb36 	bl	80025b8 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	@ 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002004 <HAL_UART_MspInit+0x94>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d134      	bne.n	8001ffc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_UART_MspInit+0x98>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <HAL_UART_MspInit+0x9c>)
 8001fe8:	f000 fae6 	bl	80025b8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2047      	movs	r0, #71	@ 0x47
 8001ff2:	f000 fa18 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ff6:	2047      	movs	r0, #71	@ 0x47
 8001ff8:	f000 fa31 	bl	800245e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	@ 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40011400 	.word	0x40011400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <NMI_Handler+0x4>

08002018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <MemManage_Handler+0x4>

08002028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <UsageFault_Handler+0x4>

08002038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002066:	f000 f8bf 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	count = TIM2->CNT;
 8002074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	461a      	mov	r2, r3
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <TIM2_IRQHandler+0x1c>)
 800207e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <TIM2_IRQHandler+0x20>)
 8002082:	f001 fbed 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000002c 	.word	0x2000002c
 8002090:	20000080 	.word	0x20000080

08002094 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	count = TIM5->CNT;
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <TIM5_IRQHandler+0x18>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	461a      	mov	r2, r3
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <TIM5_IRQHandler+0x1c>)
 80020a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020a2:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <TIM5_IRQHandler+0x20>)
 80020a4:	f001 fbdc 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	20000158 	.word	0x20000158

080020b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <USART6_IRQHandler+0x10>)
 80020be:	f002 fce1 	bl	8004a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200001e8 	.word	0x200001e8

080020cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <SystemInit+0x20>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <SystemInit+0x20>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Reset_Handler>:
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopFillZerobss+0xe>
 80020f4:	f7ff ffea 	bl	80020cc <SystemInit>
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopFillZerobss+0x12>)
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopFillZerobss+0x16>)
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopFillZerobss+0x1a>)
 80020fe:	2300      	movs	r3, #0
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:
 8002102:	58d4      	ldr	r4, [r2, r3]
 8002104:	50c4      	str	r4, [r0, r3]
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:
 8002108:	18c4      	adds	r4, r0, r3
 800210a:	428c      	cmp	r4, r1
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopFillZerobss+0x1e>)
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopFillZerobss+0x22>)
 8002112:	2300      	movs	r3, #0
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:
 800211a:	42a2      	cmp	r2, r4
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>
 800211e:	f003 fc0f 	bl	8005940 <__libc_init_array>
 8002122:	f7fe faf3 	bl	800070c <main>
 8002126:	4770      	bx	lr
 8002128:	20020000 	.word	0x20020000
 800212c:	20000000 	.word	0x20000000
 8002130:	20000010 	.word	0x20000010
 8002134:	080059c8 	.word	0x080059c8
 8002138:	20000010 	.word	0x20000010
 800213c:	20000234 	.word	0x20000234

08002140 <ADC_IRQHandler>:
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <HAL_Init+0x40>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_Init+0x40>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <HAL_Init+0x40>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 f94f 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	2000      	movs	r0, #0
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff fd58 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f967 	bl	800247a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 f92f 	bl	8002426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	@ (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000004 	.word	0x20000004
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	20000008 	.word	0x20000008

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	@ (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000230 	.word	0x20000230

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000230 	.word	0x20000230

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000000c 	.word	0x2000000c

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	@ (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	@ (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	@ (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	@ 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f7ff ff8e 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff29 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff3e 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff8e 	bl	8002364 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5d 	bl	8002310 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff31 	bl	80022d4 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa2 	bl	80023cc <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff feb6 	bl	8002210 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d008      	beq.n	80024c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e052      	b.n	800256a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0216 	bic.w	r2, r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <HAL_DMA_Abort+0x62>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0208 	bic.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002514:	e013      	b.n	800253e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002516:	f7ff fe7b 	bl	8002210 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b05      	cmp	r3, #5
 8002522:	d90c      	bls.n	800253e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e015      	b.n	800256a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e4      	bne.n	8002516 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	223f      	movs	r2, #63	@ 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d004      	beq.n	8002590 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00c      	b.n	80025aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2205      	movs	r2, #5
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	@ 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e159      	b.n	8002888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 8148 	bne.w	8002882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d005      	beq.n	800260a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002606:	2b02      	cmp	r3, #2
 8002608:	d130      	bne.n	800266c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d017      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a2 	beq.w	8002882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b57      	ldr	r3, [pc, #348]	@ (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	4a56      	ldr	r2, [pc, #344]	@ (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274c:	6453      	str	r3, [r2, #68]	@ 0x44
 800274e:	4b54      	ldr	r3, [pc, #336]	@ (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275a:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <HAL_GPIO_Init+0x2ec>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a49      	ldr	r2, [pc, #292]	@ (80028a8 <HAL_GPIO_Init+0x2f0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x202>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a48      	ldr	r2, [pc, #288]	@ (80028ac <HAL_GPIO_Init+0x2f4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x1fe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a47      	ldr	r2, [pc, #284]	@ (80028b0 <HAL_GPIO_Init+0x2f8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x1fa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a46      	ldr	r2, [pc, #280]	@ (80028b4 <HAL_GPIO_Init+0x2fc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x1f6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a45      	ldr	r2, [pc, #276]	@ (80028b8 <HAL_GPIO_Init+0x300>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x1f2>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e008      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027ae:	2303      	movs	r3, #3
 80027b0:	e004      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027ba:	2300      	movs	r3, #0
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f002 0203 	and.w	r2, r2, #3
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4093      	lsls	r3, r2
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027cc:	4935      	ldr	r1, [pc, #212]	@ (80028a4 <HAL_GPIO_Init+0x2ec>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_GPIO_Init+0x304>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fe:	4a2f      	ldr	r2, [pc, #188]	@ (80028bc <HAL_GPIO_Init+0x304>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002804:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_GPIO_Init+0x304>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002828:	4a24      	ldr	r2, [pc, #144]	@ (80028bc <HAL_GPIO_Init+0x304>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282e:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_GPIO_Init+0x304>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002852:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <HAL_GPIO_Init+0x304>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <HAL_GPIO_Init+0x304>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287c:	4a0f      	ldr	r2, [pc, #60]	@ (80028bc <HAL_GPIO_Init+0x304>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3301      	adds	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b0f      	cmp	r3, #15
 800288c:	f67f aea2 	bls.w	80025d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e267      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d075      	beq.n	80029fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002912:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b85      	ldr	r3, [pc, #532]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002926:	2b08      	cmp	r3, #8
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b82      	ldr	r3, [pc, #520]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b7e      	ldr	r3, [pc, #504]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e242      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x74>
 800295a:	4b76      	ldr	r3, [pc, #472]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a75      	ldr	r2, [pc, #468]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x98>
 8002972:	4b70      	ldr	r3, [pc, #448]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6f      	ldr	r2, [pc, #444]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6c      	ldr	r2, [pc, #432]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 800298c:	4b69      	ldr	r3, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a68      	ldr	r2, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a65      	ldr	r2, [pc, #404]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff fc30 	bl	8002210 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7ff fc2c 	bl	8002210 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e207      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fc1c 	bl	8002210 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff fc18 	bl	8002210 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1f3      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b51      	ldr	r3, [pc, #324]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1c7      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4937      	ldr	r1, [pc, #220]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff fbd1 	bl	8002210 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff fbcd 	bl	8002210 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1a8      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4925      	ldr	r1, [pc, #148]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff fbb0 	bl	8002210 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fbac 	bl	8002210 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e187      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d036      	beq.n	8002b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff fb90 	bl	8002210 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7ff fb8c 	bl	8002210 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e167      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x200>
 8002b12:	e01b      	b.n	8002b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff fb79 	bl	8002210 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e00e      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7ff fb75 	bl	8002210 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d907      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e150      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470000 	.word	0x42470000
 8002b3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b88      	ldr	r3, [pc, #544]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ea      	bne.n	8002b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8097 	beq.w	8002c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a7c      	ldr	r2, [pc, #496]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b77      	ldr	r3, [pc, #476]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b74      	ldr	r3, [pc, #464]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a73      	ldr	r2, [pc, #460]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fb35 	bl	8002210 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7ff fb31 	bl	8002210 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e10c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ea>
 8002bd0:	4b64      	ldr	r3, [pc, #400]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a63      	ldr	r2, [pc, #396]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x30c>
 8002be6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	4a5e      	ldr	r2, [pc, #376]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002c00:	4b58      	ldr	r3, [pc, #352]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0c:	4b55      	ldr	r3, [pc, #340]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a54      	ldr	r2, [pc, #336]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7ff faf6 	bl	8002210 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7ff faf2 	bl	8002210 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0cb      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	4b49      	ldr	r3, [pc, #292]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ee      	beq.n	8002c28 <HAL_RCC_OscConfig+0x334>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7ff fae0 	bl	8002210 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7ff fadc 	bl	8002210 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0b5      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ee      	bne.n	8002c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	4a38      	ldr	r2, [pc, #224]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a1 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c92:	4b34      	ldr	r3, [pc, #208]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d05c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d141      	bne.n	8002d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fab0 	bl	8002210 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7ff faac 	bl	8002210 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e087      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	491b      	ldr	r1, [pc, #108]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff fa85 	bl	8002210 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7ff fa81 	bl	8002210 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e05c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x416>
 8002d28:	e054      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff fa6e 	bl	8002210 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff fa6a 	bl	8002210 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e045      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x444>
 8002d56:	e03d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e038      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x4ec>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d121      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	3b01      	subs	r3, #1
 8002dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cc      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d90c      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b65      	ldr	r3, [pc, #404]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d044      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d119      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e067      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 0203 	bic.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4934      	ldr	r1, [pc, #208]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7ff f99c 	bl	8002210 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7ff f998 	bl	8002210 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e04f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 020c 	and.w	r2, r3, #12
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1eb      	bne.n	8002edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f8fc 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	080059a0 	.word	0x080059a0
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	20000008 	.word	0x20000008

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b094      	sub	sp, #80	@ 0x50
 8002fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc8:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	f200 80e1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe2:	e0db      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b73      	ldr	r3, [pc, #460]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe8:	e0db      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fea:	4b73      	ldr	r3, [pc, #460]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fee:	e0d8      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
 800301e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	f04f 0000 	mov.w	r0, #0
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	0159      	lsls	r1, r3, #5
 8003030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003034:	0150      	lsls	r0, r2, #5
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4621      	mov	r1, r4
 800303c:	1a51      	subs	r1, r2, r1
 800303e:	6139      	str	r1, [r7, #16]
 8003040:	4629      	mov	r1, r5
 8003042:	eb63 0301 	sbc.w	r3, r3, r1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003054:	4659      	mov	r1, fp
 8003056:	018b      	lsls	r3, r1, #6
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305e:	4651      	mov	r1, sl
 8003060:	018a      	lsls	r2, r1, #6
 8003062:	4651      	mov	r1, sl
 8003064:	ebb2 0801 	subs.w	r8, r2, r1
 8003068:	4659      	mov	r1, fp
 800306a:	eb63 0901 	sbc.w	r9, r3, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003082:	4690      	mov	r8, r2
 8003084:	4699      	mov	r9, r3
 8003086:	4623      	mov	r3, r4
 8003088:	eb18 0303 	adds.w	r3, r8, r3
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	462b      	mov	r3, r5
 8003090:	eb49 0303 	adc.w	r3, r9, r3
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a2:	4629      	mov	r1, r5
 80030a4:	024b      	lsls	r3, r1, #9
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ac:	4621      	mov	r1, r4
 80030ae:	024a      	lsls	r2, r1, #9
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	2200      	movs	r2, #0
 80030b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030c0:	f7fd f88a 	bl	80001d8 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030cc:	e058      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	4611      	mov	r1, r2
 80030da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0159      	lsls	r1, r3, #5
 80030f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fa:	0150      	lsls	r0, r2, #5
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4641      	mov	r1, r8
 8003102:	ebb2 0a01 	subs.w	sl, r2, r1
 8003106:	4649      	mov	r1, r9
 8003108:	eb63 0b01 	sbc.w	fp, r3, r1
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800311c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003120:	ebb2 040a 	subs.w	r4, r2, sl
 8003124:	eb63 050b 	sbc.w	r5, r3, fp
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	464b      	mov	r3, r9
 8003144:	eb45 0303 	adc.w	r3, r5, r3
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003156:	4629      	mov	r1, r5
 8003158:	028b      	lsls	r3, r1, #10
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003160:	4621      	mov	r1, r4
 8003162:	028a      	lsls	r2, r1, #10
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003174:	f7fd f830 	bl	80001d8 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800319e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3750      	adds	r7, #80	@ 0x50
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	007a1200 	.word	0x007a1200

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff0 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	080059b0 	.word	0x080059b0

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003200:	f7ff ffdc 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0b5b      	lsrs	r3, r3, #13
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	080059b0 	.word	0x080059b0

08003224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e041      	b.n	80032ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe fd16 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f000 fe44 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d001      	beq.n	80032dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e03c      	b.n	8003356 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003364 <HAL_TIM_Base_Start+0xa0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_Base_Start+0x5c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_Base_Start+0x5c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003368 <HAL_TIM_Base_Start+0xa4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_Base_Start+0x5c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a19      	ldr	r2, [pc, #100]	@ (800336c <HAL_TIM_Base_Start+0xa8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_Base_Start+0x5c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a17      	ldr	r2, [pc, #92]	@ (8003370 <HAL_TIM_Base_Start+0xac>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_Base_Start+0x5c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a16      	ldr	r2, [pc, #88]	@ (8003374 <HAL_TIM_Base_Start+0xb0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d010      	beq.n	8003354 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e007      	b.n	8003354 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40014000 	.word	0x40014000

08003378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e041      	b.n	800340e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fd24 	bl	8001dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fd9a 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_TIM_PWM_Start+0x24>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e022      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d109      	bne.n	8003456 <HAL_TIM_PWM_Start+0x3e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e015      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d109      	bne.n	8003470 <HAL_TIM_PWM_Start+0x58>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e008      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e068      	b.n	800355c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0x82>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003498:	e013      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0x92>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a8:	e00b      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PWM_Start+0xa2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b8:	e003      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f8e0 	bl	8004690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a23      	ldr	r2, [pc, #140]	@ (8003564 <HAL_TIM_PWM_Start+0x14c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_TIM_PWM_Start+0x14c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_TIM_PWM_Start+0x10e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d013      	beq.n	8003526 <HAL_TIM_PWM_Start+0x10e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <HAL_TIM_PWM_Start+0x150>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIM_PWM_Start+0x10e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a17      	ldr	r2, [pc, #92]	@ (800356c <HAL_TIM_PWM_Start+0x154>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_TIM_PWM_Start+0x10e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <HAL_TIM_PWM_Start+0x158>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIM_PWM_Start+0x10e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <HAL_TIM_PWM_Start+0x15c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d111      	bne.n	800354a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d010      	beq.n	800355a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003548:	e007      	b.n	800355a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40014000 	.word	0x40014000

08003578 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f839 	bl	8003616 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fc9a 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0x1e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e013      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_IC_Start_IT+0x2e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e00b      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_IC_Start_IT+0x3e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e003      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_TIM_IC_Start_IT+0x58>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e013      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d104      	bne.n	8003694 <HAL_TIM_IC_Start_IT+0x68>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e00b      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d104      	bne.n	80036a4 <HAL_TIM_IC_Start_IT+0x78>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e003      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d102      	bne.n	80036ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036b4:	7b7b      	ldrb	r3, [r7, #13]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d001      	beq.n	80036be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0c2      	b.n	8003844 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036cc:	e013      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d104      	bne.n	80036de <HAL_TIM_IC_Start_IT+0xb2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0xc2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	e003      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_IC_Start_IT+0xda>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003704:	e013      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d104      	bne.n	8003716 <HAL_TIM_IC_Start_IT+0xea>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003714:	e00b      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d104      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0xfa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	e003      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d841      	bhi.n	80037b8 <HAL_TIM_IC_Start_IT+0x18c>
 8003734:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <HAL_TIM_IC_Start_IT+0x110>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003771 	.word	0x08003771
 8003740:	080037b9 	.word	0x080037b9
 8003744:	080037b9 	.word	0x080037b9
 8003748:	080037b9 	.word	0x080037b9
 800374c:	08003783 	.word	0x08003783
 8003750:	080037b9 	.word	0x080037b9
 8003754:	080037b9 	.word	0x080037b9
 8003758:	080037b9 	.word	0x080037b9
 800375c:	08003795 	.word	0x08003795
 8003760:	080037b9 	.word	0x080037b9
 8003764:	080037b9 	.word	0x080037b9
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037a7 	.word	0x080037a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0202 	orr.w	r2, r2, #2
 800377e:	60da      	str	r2, [r3, #12]
      break;
 8003780:	e01d      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0204 	orr.w	r2, r2, #4
 8003790:	60da      	str	r2, [r3, #12]
      break;
 8003792:	e014      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	60da      	str	r2, [r3, #12]
      break;
 80037a4:	e00b      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0210 	orr.w	r2, r2, #16
 80037b4:	60da      	str	r2, [r3, #12]
      break;
 80037b6:	e002      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d13e      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 ff5f 	bl	8004690 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIM_IC_Start_IT+0x220>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e4:	d013      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <HAL_TIM_IC_Start_IT+0x224>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_TIM_IC_Start_IT+0x228>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <HAL_TIM_IC_Start_IT+0x22c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a14      	ldr	r2, [pc, #80]	@ (800385c <HAL_TIM_IC_Start_IT+0x230>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d010      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	e007      	b.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0202 	mvn.w	r2, #2
 8003894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fb01 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 faf3 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fb04 	bl	8003ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fadb 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 facd 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fade 	bl	8003ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fab5 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 faa7 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fab8 	bl	8003ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa8f 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa81 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa92 	bl	8003ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa5f 	bl	8003e8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 ff40 	bl	8004870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa63 	bl	8003eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 ff12 	bl	800485c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e088      	b.n	8003b70 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a7c:	f000 fc50 	bl	8004320 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020c 	bic.w	r2, r2, #12
 8003a8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	619a      	str	r2, [r3, #24]
 8003aa2:	e060      	b.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003aba:	f000 fcc8 	bl	800444e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003acc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6999      	ldr	r1, [r3, #24]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	021a      	lsls	r2, r3, #8
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	619a      	str	r2, [r3, #24]
 8003ae2:	e040      	b.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11b      	bne.n	8003b22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003afa:	f000 fd15 	bl	8004528 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020c 	bic.w	r2, r2, #12
 8003b0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69d9      	ldr	r1, [r3, #28]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	61da      	str	r2, [r3, #28]
 8003b20:	e021      	b.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d11c      	bne.n	8003b62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b38:	f000 fd32 	bl	80045a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69d9      	ldr	r1, [r3, #28]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	021a      	lsls	r2, r3, #8
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	61da      	str	r2, [r3, #28]
 8003b60:	e001      	b.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0ae      	b.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	f200 809f 	bhi.w	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003ce5 	.word	0x08003ce5
 8003bb4:	08003ce5 	.word	0x08003ce5
 8003bb8:	08003ce5 	.word	0x08003ce5
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003ce5 	.word	0x08003ce5
 8003bc4:	08003ce5 	.word	0x08003ce5
 8003bc8:	08003ce5 	.word	0x08003ce5
 8003bcc:	08003c63 	.word	0x08003c63
 8003bd0:	08003ce5 	.word	0x08003ce5
 8003bd4:	08003ce5 	.word	0x08003ce5
 8003bd8:	08003ce5 	.word	0x08003ce5
 8003bdc:	08003ca3 	.word	0x08003ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa0e 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	619a      	str	r2, [r3, #24]
      break;
 8003c1e:	e064      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa54 	bl	80040d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]
      break;
 8003c60:	e043      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fa9f 	bl	80041ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0208 	orr.w	r2, r2, #8
 8003c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0204 	bic.w	r2, r2, #4
 8003c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
      break;
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fae9 	bl	8004280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	021a      	lsls	r2, r3, #8
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	61da      	str	r2, [r3, #28]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b4      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x186>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_TIM_ConfigClockSource+0x172>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b70      	cmp	r3, #112	@ 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d6c:	2b70      	cmp	r3, #112	@ 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b60      	cmp	r3, #96	@ 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x11a>
 8003d74:	2b60      	cmp	r3, #96	@ 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b50      	cmp	r3, #80	@ 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d7c:	2b50      	cmp	r3, #80	@ 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x13a>
 8003d84:	2b40      	cmp	r3, #64	@ 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b30      	cmp	r3, #48	@ 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	f000 fc4d 	bl	8004650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04f      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	f000 fc36 	bl	8004650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 faf4 	bl	80043f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	@ 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fc03 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 fb50 	bl	80044c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	@ 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fbf3 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fad4 	bl	80043f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	@ 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fbe3 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fbda 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3a      	ldr	r2, [pc, #232]	@ (8003fec <TIM_Base_SetConfig+0xfc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <TIM_Base_SetConfig+0x38>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0e:	d00b      	beq.n	8003f28 <TIM_Base_SetConfig+0x38>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <TIM_Base_SetConfig+0x100>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_Base_SetConfig+0x38>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a36      	ldr	r2, [pc, #216]	@ (8003ff4 <TIM_Base_SetConfig+0x104>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0x38>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a35      	ldr	r2, [pc, #212]	@ (8003ff8 <TIM_Base_SetConfig+0x108>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d108      	bne.n	8003f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <TIM_Base_SetConfig+0xfc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01b      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d017      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	@ (8003ff0 <TIM_Base_SetConfig+0x100>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <TIM_Base_SetConfig+0x104>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <TIM_Base_SetConfig+0x108>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	@ (8003ffc <TIM_Base_SetConfig+0x10c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	@ (8004000 <TIM_Base_SetConfig+0x110>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a23      	ldr	r2, [pc, #140]	@ (8004004 <TIM_Base_SetConfig+0x114>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003fec <TIM_Base_SetConfig+0xfc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0201 	bic.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1c      	ldr	r2, [pc, #112]	@ (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10c      	bne.n	800407e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0308 	bic.w	r3, r3, #8
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a13      	ldr	r2, [pc, #76]	@ (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800408c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000

080040d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 0210 	bic.w	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <TIM_OC2_SetConfig+0xd4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10d      	bne.n	8004150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a15      	ldr	r2, [pc, #84]	@ (80041a8 <TIM_OC2_SetConfig+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d113      	bne.n	8004180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800415e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000

080041ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <TIM_OC3_SetConfig+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10d      	bne.n	8004226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a14      	ldr	r2, [pc, #80]	@ (800427c <TIM_OC3_SetConfig+0xd0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000

08004280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	@ (800431c <TIM_OC4_SetConfig+0x9c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000

08004320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0201 	bic.w	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <TIM_TI1_SetConfig+0xbc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <TIM_TI1_SetConfig+0x56>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d00f      	beq.n	8004376 <TIM_TI1_SetConfig+0x56>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a21      	ldr	r2, [pc, #132]	@ (80043e0 <TIM_TI1_SetConfig+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00b      	beq.n	8004376 <TIM_TI1_SetConfig+0x56>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a20      	ldr	r2, [pc, #128]	@ (80043e4 <TIM_TI1_SetConfig+0xc4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_TI1_SetConfig+0x56>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <TIM_TI1_SetConfig+0xc8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_TI1_SetConfig+0x56>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a1e      	ldr	r2, [pc, #120]	@ (80043ec <TIM_TI1_SetConfig+0xcc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <TIM_TI1_SetConfig+0x5a>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <TIM_TI1_SetConfig+0x5c>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e003      	b.n	800439a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f023 030a 	bic.w	r3, r3, #10
 80043b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 030a 	and.w	r3, r3, #10
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000

080043f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 030a 	bic.w	r3, r3, #10
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0210 	bic.w	r2, r3, #16
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800448c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	b29b      	uxth	r3, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	031b      	lsls	r3, r3, #12
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f023 0303 	bic.w	r3, r3, #3
 8004554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004564:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	b2db      	uxtb	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	031b      	lsls	r3, r3, #12
 80045f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e050      	b.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004740:	d013      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a13      	ldr	r2, [pc, #76]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10c      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4313      	orrs	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000

080047b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e03d      	b.n	8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e042      	b.n	800491c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd fb60 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	@ 0x24
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fdbd 	bl	8005448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	d175      	bne.n	8004a30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_Transmit+0x2c>
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e06e      	b.n	8004a32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2221      	movs	r2, #33	@ 0x21
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004962:	f7fd fc55 	bl	8002210 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497c:	d108      	bne.n	8004990 <HAL_UART_Transmit+0x6c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e003      	b.n	8004998 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004998:	e02e      	b.n	80049f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fb1f 	bl	8004fe8 <UART_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e03a      	b.n	8004a32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	3302      	adds	r3, #2
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e007      	b.n	80049ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3301      	adds	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1cb      	bne.n	800499a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2140      	movs	r1, #64	@ 0x40
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 faeb 	bl	8004fe8 <UART_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e006      	b.n	8004a32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d112      	bne.n	8004a7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Receive_IT+0x26>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e00b      	b.n	8004a7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fb12 	bl	800509a <UART_Start_Receive_IT>
 8004a76:	4603      	mov	r3, r0
 8004a78:	e000      	b.n	8004a7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b0ba      	sub	sp, #232	@ 0xe8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_UART_IRQHandler+0x66>
 8004ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fbf2 	bl	80052cc <UART_Receive_IT>
      return;
 8004ae8:	e25b      	b.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80de 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x22c>
 8004af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80d1 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xae>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_UART_IRQHandler+0xd2>
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0202 	orr.w	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_UART_IRQHandler+0xf6>
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <HAL_UART_IRQHandler+0x126>
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0208 	orr.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 81f2 	beq.w	8004f98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x14e>
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fb7d 	bl	80052cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <HAL_UART_IRQHandler+0x17a>
 8004bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04f      	beq.n	8004c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa85 	bl	800510e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0e:	2b40      	cmp	r3, #64	@ 0x40
 8004c10:	d141      	bne.n	8004c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e64 <HAL_UART_IRQHandler+0x3e0>)
 8004c6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd fc7d 	bl	8002572 <HAL_DMA_Abort_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	e00e      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f994 	bl	8004fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	e00a      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f990 	bl	8004fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	e006      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f98c 	bl	8004fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004caa:	e175      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	bf00      	nop
    return;
 8004cae:	e173      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	f040 814f 	bne.w	8004f58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8148 	beq.w	8004f58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8141 	beq.w	8004f58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b40      	cmp	r3, #64	@ 0x40
 8004cf8:	f040 80b6 	bne.w	8004e68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8145 	beq.w	8004f9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f080 813e 	bcs.w	8004f9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d32:	f000 8088 	beq.w	8004e46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1d9      	bne.n	8004d36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004da6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e1      	bne.n	8004d82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004de2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004de4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004de8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e3      	bne.n	8004dbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e16:	f023 0310 	bic.w	r3, r3, #16
 8004e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e3      	bne.n	8004e04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd fb26 	bl	8002492 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8b7 	bl	8004fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e62:	e09b      	b.n	8004f9c <HAL_UART_IRQHandler+0x518>
 8004e64:	080051d5 	.word	0x080051d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 808e 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8089 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e3      	bne.n	8004e8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e3      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0310 	bic.w	r3, r3, #16
 8004f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69b9      	ldr	r1, [r7, #24]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e3      	bne.n	8004f0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f83d 	bl	8004fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f56:	e023      	b.n	8004fa0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <HAL_UART_IRQHandler+0x4f4>
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f943 	bl	80051fc <UART_Transmit_IT>
    return;
 8004f76:	e014      	b.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f983 	bl	800529c <UART_EndTransmit_IT>
    return;
 8004f96:	e004      	b.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f98:	bf00      	nop
 8004f9a:	e002      	b.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fa0:	bf00      	nop
  }
}
 8004fa2:	37e8      	adds	r7, #232	@ 0xe8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff8:	e03b      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d037      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fd f905 	bl	8002210 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <UART_WaitOnFlagUntilTimeout+0x30>
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e03a      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d023      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b80      	cmp	r3, #128	@ 0x80
 800502e:	d020      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b40      	cmp	r3, #64	@ 0x40
 8005034:	d01d      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d116      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f857 	bl	800510e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2208      	movs	r2, #8
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e00f      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	429a      	cmp	r2, r3
 800508e:	d0b4      	beq.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	4613      	mov	r3, r2
 80050a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2222      	movs	r2, #34	@ 0x22
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0220 	orr.w	r2, r2, #32
 80050fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b095      	sub	sp, #84	@ 0x54
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005136:	643a      	str	r2, [r7, #64]	@ 0x40
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800513c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	61fb      	str	r3, [r7, #28]
   return(result);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	2b01      	cmp	r3, #1
 8005184:	d119      	bne.n	80051ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	60bb      	str	r3, [r7, #8]
   return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0310 	bic.w	r3, r3, #16
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a6:	61ba      	str	r2, [r7, #24]
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	613b      	str	r3, [r7, #16]
   return(result);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051c8:	bf00      	nop
 80051ca:	3754      	adds	r7, #84	@ 0x54
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fee4 	bl	8004fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b21      	cmp	r3, #33	@ 0x21
 800520e:	d13e      	bne.n	800528e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005218:	d114      	bne.n	8005244 <UART_Transmit_IT+0x48>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d110      	bne.n	8005244 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005236:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]
 8005242:	e008      	b.n	8005256 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6211      	str	r1, [r2, #32]
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4619      	mov	r1, r3
 8005264:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005278:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005288:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fe73 	bl	8004fa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b22      	cmp	r3, #34	@ 0x22
 80052de:	f040 80ae 	bne.w	800543e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ea:	d117      	bne.n	800531c <UART_Receive_IT+0x50>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d113      	bne.n	800531c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	b29a      	uxth	r2, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
 800531a:	e026      	b.n	800536a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532e:	d007      	beq.n	8005340 <UART_Receive_IT+0x74>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <UART_Receive_IT+0x82>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e008      	b.n	8005360 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535a:	b2da      	uxtb	r2, r3
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4619      	mov	r1, r3
 8005378:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800537a:	2b00      	cmp	r3, #0
 800537c:	d15d      	bne.n	800543a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0220 	bic.w	r2, r2, #32
 800538c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800539c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d135      	bne.n	8005430 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	613b      	str	r3, [r7, #16]
   return(result);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ea:	623a      	str	r2, [r7, #32]
 80053ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	69f9      	ldr	r1, [r7, #28]
 80053f0:	6a3a      	ldr	r2, [r7, #32]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b10      	cmp	r3, #16
 800540a:	d10a      	bne.n	8005422 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fdd1 	bl	8004fd0 <HAL_UARTEx_RxEventCallback>
 800542e:	e002      	b.n	8005436 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc fba9 	bl	8001b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e002      	b.n	8005440 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3730      	adds	r7, #48	@ 0x30
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800544c:	b0c0      	sub	sp, #256	@ 0x100
 800544e:	af00      	add	r7, sp, #0
 8005450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	68d9      	ldr	r1, [r3, #12]
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	ea40 0301 	orr.w	r3, r0, r1
 8005470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054a0:	f021 010c 	bic.w	r1, r1, #12
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ae:	430b      	orrs	r3, r1
 80054b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	6999      	ldr	r1, [r3, #24]
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	ea40 0301 	orr.w	r3, r0, r1
 80054ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005714 <UART_SetConfig+0x2cc>)
 80054d8:	429a      	cmp	r2, r3
 80054da:	d005      	beq.n	80054e8 <UART_SetConfig+0xa0>
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005718 <UART_SetConfig+0x2d0>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d104      	bne.n	80054f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fd fe88 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 80054ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054f0:	e003      	b.n	80054fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f2:	f7fd fe6f 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 80054f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005504:	f040 810c 	bne.w	8005720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	1891      	adds	r1, r2, r2
 8005520:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005522:	415b      	adcs	r3, r3
 8005524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800552a:	4621      	mov	r1, r4
 800552c:	eb12 0801 	adds.w	r8, r2, r1
 8005530:	4629      	mov	r1, r5
 8005532:	eb43 0901 	adc.w	r9, r3, r1
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800554a:	4690      	mov	r8, r2
 800554c:	4699      	mov	r9, r3
 800554e:	4623      	mov	r3, r4
 8005550:	eb18 0303 	adds.w	r3, r8, r3
 8005554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005558:	462b      	mov	r3, r5
 800555a:	eb49 0303 	adc.w	r3, r9, r3
 800555e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800556e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005576:	460b      	mov	r3, r1
 8005578:	18db      	adds	r3, r3, r3
 800557a:	653b      	str	r3, [r7, #80]	@ 0x50
 800557c:	4613      	mov	r3, r2
 800557e:	eb42 0303 	adc.w	r3, r2, r3
 8005582:	657b      	str	r3, [r7, #84]	@ 0x54
 8005584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800558c:	f7fa fe24 	bl	80001d8 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b61      	ldr	r3, [pc, #388]	@ (800571c <UART_SetConfig+0x2d4>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	011c      	lsls	r4, r3, #4
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055b8:	415b      	adcs	r3, r3
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055c0:	4641      	mov	r1, r8
 80055c2:	eb12 0a01 	adds.w	sl, r2, r1
 80055c6:	4649      	mov	r1, r9
 80055c8:	eb43 0b01 	adc.w	fp, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055e0:	4692      	mov	sl, r2
 80055e2:	469b      	mov	fp, r3
 80055e4:	4643      	mov	r3, r8
 80055e6:	eb1a 0303 	adds.w	r3, sl, r3
 80055ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ee:	464b      	mov	r3, r9
 80055f0:	eb4b 0303 	adc.w	r3, fp, r3
 80055f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800560c:	460b      	mov	r3, r1
 800560e:	18db      	adds	r3, r3, r3
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
 8005612:	4613      	mov	r3, r2
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	647b      	str	r3, [r7, #68]	@ 0x44
 800561a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800561e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005622:	f7fa fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4611      	mov	r1, r2
 800562c:	4b3b      	ldr	r3, [pc, #236]	@ (800571c <UART_SetConfig+0x2d4>)
 800562e:	fba3 2301 	umull	r2, r3, r3, r1
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2264      	movs	r2, #100	@ 0x64
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	1acb      	subs	r3, r1, r3
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005642:	4b36      	ldr	r3, [pc, #216]	@ (800571c <UART_SetConfig+0x2d4>)
 8005644:	fba3 2302 	umull	r2, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005650:	441c      	add	r4, r3
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005656:	2200      	movs	r2, #0
 8005658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800565c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800566c:	415b      	adcs	r3, r3
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005674:	4641      	mov	r1, r8
 8005676:	1851      	adds	r1, r2, r1
 8005678:	6339      	str	r1, [r7, #48]	@ 0x30
 800567a:	4649      	mov	r1, r9
 800567c:	414b      	adcs	r3, r1
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800568c:	4659      	mov	r1, fp
 800568e:	00cb      	lsls	r3, r1, #3
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005696:	4651      	mov	r1, sl
 8005698:	00ca      	lsls	r2, r1, #3
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	4642      	mov	r2, r8
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056a8:	464b      	mov	r3, r9
 80056aa:	460a      	mov	r2, r1
 80056ac:	eb42 0303 	adc.w	r3, r2, r3
 80056b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056c8:	460b      	mov	r3, r1
 80056ca:	18db      	adds	r3, r3, r3
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ce:	4613      	mov	r3, r2
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056de:	f7fa fd7b 	bl	80001d8 <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4b0d      	ldr	r3, [pc, #52]	@ (800571c <UART_SetConfig+0x2d4>)
 80056e8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	2164      	movs	r1, #100	@ 0x64
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	3332      	adds	r3, #50	@ 0x32
 80056fa:	4a08      	ldr	r2, [pc, #32]	@ (800571c <UART_SetConfig+0x2d4>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	f003 0207 	and.w	r2, r3, #7
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4422      	add	r2, r4
 800570e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005710:	e106      	b.n	8005920 <UART_SetConfig+0x4d8>
 8005712:	bf00      	nop
 8005714:	40011000 	.word	0x40011000
 8005718:	40011400 	.word	0x40011400
 800571c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800572a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800572e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005732:	4642      	mov	r2, r8
 8005734:	464b      	mov	r3, r9
 8005736:	1891      	adds	r1, r2, r2
 8005738:	6239      	str	r1, [r7, #32]
 800573a:	415b      	adcs	r3, r3
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005742:	4641      	mov	r1, r8
 8005744:	1854      	adds	r4, r2, r1
 8005746:	4649      	mov	r1, r9
 8005748:	eb43 0501 	adc.w	r5, r3, r1
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	00eb      	lsls	r3, r5, #3
 8005756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575a:	00e2      	lsls	r2, r4, #3
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	4643      	mov	r3, r8
 8005762:	18e3      	adds	r3, r4, r3
 8005764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005768:	464b      	mov	r3, r9
 800576a:	eb45 0303 	adc.w	r3, r5, r3
 800576e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800577e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800578e:	4629      	mov	r1, r5
 8005790:	008b      	lsls	r3, r1, #2
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005798:	4621      	mov	r1, r4
 800579a:	008a      	lsls	r2, r1, #2
 800579c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057a0:	f7fa fd1a 	bl	80001d8 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4b60      	ldr	r3, [pc, #384]	@ (800592c <UART_SetConfig+0x4e4>)
 80057aa:	fba3 2302 	umull	r2, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	011c      	lsls	r4, r3, #4
 80057b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	1891      	adds	r1, r2, r2
 80057ca:	61b9      	str	r1, [r7, #24]
 80057cc:	415b      	adcs	r3, r3
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d4:	4641      	mov	r1, r8
 80057d6:	1851      	adds	r1, r2, r1
 80057d8:	6139      	str	r1, [r7, #16]
 80057da:	4649      	mov	r1, r9
 80057dc:	414b      	adcs	r3, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ec:	4659      	mov	r1, fp
 80057ee:	00cb      	lsls	r3, r1, #3
 80057f0:	4651      	mov	r1, sl
 80057f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f6:	4651      	mov	r1, sl
 80057f8:	00ca      	lsls	r2, r1, #3
 80057fa:	4610      	mov	r0, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	4642      	mov	r2, r8
 8005802:	189b      	adds	r3, r3, r2
 8005804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005808:	464b      	mov	r3, r9
 800580a:	460a      	mov	r2, r1
 800580c:	eb42 0303 	adc.w	r3, r2, r3
 8005810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800581e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800582c:	4649      	mov	r1, r9
 800582e:	008b      	lsls	r3, r1, #2
 8005830:	4641      	mov	r1, r8
 8005832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005836:	4641      	mov	r1, r8
 8005838:	008a      	lsls	r2, r1, #2
 800583a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800583e:	f7fa fccb 	bl	80001d8 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4611      	mov	r1, r2
 8005848:	4b38      	ldr	r3, [pc, #224]	@ (800592c <UART_SetConfig+0x4e4>)
 800584a:	fba3 2301 	umull	r2, r3, r3, r1
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2264      	movs	r2, #100	@ 0x64
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	1acb      	subs	r3, r1, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	3332      	adds	r3, #50	@ 0x32
 800585c:	4a33      	ldr	r2, [pc, #204]	@ (800592c <UART_SetConfig+0x4e4>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	673b      	str	r3, [r7, #112]	@ 0x70
 8005872:	677a      	str	r2, [r7, #116]	@ 0x74
 8005874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	415b      	adcs	r3, r3
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005888:	4641      	mov	r1, r8
 800588a:	1851      	adds	r1, r2, r1
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	4649      	mov	r1, r9
 8005890:	414b      	adcs	r3, r1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058a0:	4659      	mov	r1, fp
 80058a2:	00cb      	lsls	r3, r1, #3
 80058a4:	4651      	mov	r1, sl
 80058a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058aa:	4651      	mov	r1, sl
 80058ac:	00ca      	lsls	r2, r1, #3
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	4642      	mov	r2, r8
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ba:	464b      	mov	r3, r9
 80058bc:	460a      	mov	r2, r1
 80058be:	eb42 0303 	adc.w	r3, r2, r3
 80058c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058dc:	4649      	mov	r1, r9
 80058de:	008b      	lsls	r3, r1, #2
 80058e0:	4641      	mov	r1, r8
 80058e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e6:	4641      	mov	r1, r8
 80058e8:	008a      	lsls	r2, r1, #2
 80058ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ee:	f7fa fc73 	bl	80001d8 <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <UART_SetConfig+0x4e4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	@ 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	3332      	adds	r3, #50	@ 0x32
 800590a:	4a08      	ldr	r2, [pc, #32]	@ (800592c <UART_SetConfig+0x4e4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4422      	add	r2, r4
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005926:	46bd      	mov	sp, r7
 8005928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592c:	51eb851f 	.word	0x51eb851f

08005930 <memset>:
 8005930:	4402      	add	r2, r0
 8005932:	4603      	mov	r3, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4d0d      	ldr	r5, [pc, #52]	@ (8005978 <__libc_init_array+0x38>)
 8005944:	4c0d      	ldr	r4, [pc, #52]	@ (800597c <__libc_init_array+0x3c>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	2600      	movs	r6, #0
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	4d0b      	ldr	r5, [pc, #44]	@ (8005980 <__libc_init_array+0x40>)
 8005952:	4c0c      	ldr	r4, [pc, #48]	@ (8005984 <__libc_init_array+0x44>)
 8005954:	f000 f818 	bl	8005988 <_init>
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	2600      	movs	r6, #0
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	080059c0 	.word	0x080059c0
 800597c:	080059c0 	.word	0x080059c0
 8005980:	080059c0 	.word	0x080059c0
 8005984:	080059c4 	.word	0x080059c4

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
